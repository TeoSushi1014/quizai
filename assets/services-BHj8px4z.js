import{s as e,a as t}from"./service-supabase-wASzC9XA.js";import{v as r,a as i}from"./feature-quiz-sharedquiz-Clu9xfzS.js";import{l as a}from"./util-storage-UFVse9kk.js";import{_ as s,a as n}from"./util-pdf-CkIVnOzu.js";import{m as o}from"./util-document-Dv5rbOR1.js";import{b as c}from"./google-services-Bc_loC93.js";import{a7 as l,G as u,b as d}from"./app-components-CFPFxe5x.js";const h=new class{constructor(){this.isProduction=!1,this.userId=null;try{this.isProduction=!0}catch(e){this.isProduction="undefined"!=typeof process&&!0}}setUserId(e){this.userId=e}debug(e,t,r){this.log("debug",e,t,r)}info(e,t,r){this.log("info",e,t,r)}warn(e,t,r,i){this.log("warn",e,t,r,i)}error(e,t,r,i){this.log("error",e,t,r,i)}log(e,t,r,i,a){const s={timestamp:(new Date).toISOString(),level:e,message:t,context:r,data:i,userId:this.userId||void 0};a&&(s.errorDetails={name:a.name,message:a.message,stack:this.isProduction?void 0:a.stack}),("error"===e||"warn"===e&&s.message.toLowerCase().includes("critical"))&&(this.consoleLog(s),this.storeRecentLog(s))}consoleLog(e){const t=[`[${e.level.toUpperCase()}]${e.context?` [${e.context}]`:""}`,e.message];e.data&&Object.keys(e.data).length>0&&t.push(e.data),e.errorDetails&&t.push(e.errorDetails),e.userId&&t.push(`(User: ${e.userId})`),e.level}storeRecentLog(e){if("undefined"!=typeof localStorage)try{const r="quizai-recent-logs",i=50,a=localStorage.getItem(r);let s=[];if(a)try{s=JSON.parse(a),Array.isArray(s)||(s=[])}catch(t){s=[]}const n=[e,...s.slice(0,i-1)];localStorage.setItem(r,JSON.stringify(n))}catch(r){}}},m="secure_config_",g="secure_config_expiry_",p={GOOGLE_CLIENT_ID:"486123633428-14f8o50husb82sho688e0qvc962ucr4n.apps.googleusercontent.com"};class f{constructor(){this.apiKeysCache=new Map,this.cacheExpiry=new Map,this.CACHE_DURATION=864e5,this.pendingRequests=new Map,this.loadCacheFromLocalStorage()}static getInstance(){return f.instance||(f.instance=new f),f.instance}isCacheValid(e){const t=this.cacheExpiry.get(e);return!!t&&Date.now()<t}loadCacheFromLocalStorage(){try{for(let e=0;e<localStorage.length;e++){const t=localStorage.key(e);if(null==t?void 0:t.startsWith(m)){const e=t.substring(14),r=g+e,i=localStorage.getItem(r);if(i){const a=parseInt(i);if(a>Date.now()){const r=localStorage.getItem(t);r&&(this.apiKeysCache.set(e,r),this.cacheExpiry.set(e,a))}else localStorage.removeItem(t),localStorage.removeItem(r)}}}}catch(e){}}saveToLocalStorage(e,t,r){try{localStorage.setItem(m+e,t),localStorage.setItem(g+e,r.toString())}catch(i){}}getDefaultValue(e){return p[e]||null}async getApiKey(e){if(this.pendingRequests.has(e))return this.pendingRequests.get(e);const t=this.fetchApiKey(e);return this.pendingRequests.set(e,t),t.then(()=>{this.pendingRequests.delete(e)}).catch(()=>{this.pendingRequests.delete(e)}),t}async fetchApiKey(e){try{if(this.isCacheValid(e)){const t=this.apiKeysCache.get(e);if(t)return t}const r=this.getEnvValue(e);if(r)return this.setCacheValue(e,r),r;const i=new Promise((t,r)=>{setTimeout(()=>r(new Error(`API request timeout for key ${e}`)),3e3)}),a=this.fetchFromAPI(e);try{const t=await Promise.race([a,i]);if(t)return this.setCacheValue(e,t),t}catch(t){h.warn(`API request for key ${e} failed or timed out, using fallbacks`,"SecureConfigService")}const s=this.getDefaultValue(e);return s?(this.setCacheValue(e,s),s):null}catch(t){return h.error(`Error fetching API key: ${e}`,"SecureConfigService",{},t),this.getDefaultValue(e)||null}}getEnvValue(e){var t;try{if("GEMINI_API_KEY"===e)return(null==(t=window.__ENV__)?void 0:t.VITE_GEMINI_API_KEY)||null;if("VITE_RECAPTCHA_SITE_KEY"===e)return null;if("VITE_RECAPTCHA_ASSESSMENT_API_KEY"===e)return null;if("GOOGLE_CLIENT_ID"===e){const e="486123633428-14f8o50husb82sho688e0qvc962ucr4n.apps.googleusercontent.com";return e?(h.info("Using Google Client ID from environment variables","SecureConfigService"),e):null}return null}catch(r){return null}}setCacheValue(e,t){const r=Date.now()+this.CACHE_DURATION;this.apiKeysCache.set(e,t),this.cacheExpiry.set(e,r),this.saveToLocalStorage(e,t,r)}async fetchFromAPI(t){let r=null,i=null;h.info(`Fetching API key: ${t}`,"SecureConfigService");try{const a=await e.from("api_keys").select("key_name, key_value").eq("key_name",t).maybeSingle();if(r=a.data,i=a.error,i)h.warn(`API keys query failed for ${t}`,"SecureConfigService",{error:i});else if(null==r?void 0:r.key_value)return h.info(`Found ${t} in api_keys table`,"SecureConfigService"),r.key_value}catch(a){h.warn(`Failed to fetch from api_keys for ${t}`,"SecureConfigService",{},a)}try{const a=await e.from("app_configs").select("key_value").eq("key_name",t).maybeSingle();if(r=a.data,i=a.error,i)h.warn(`App config query failed for ${t}`,"SecureConfigService");else if(null==r?void 0:r.key_value)return h.info(`Found ${t} in app_configs table`,"SecureConfigService"),r.key_value}catch(s){h.warn(`Failed to fetch app config for ${t}`,"SecureConfigService")}if(["GOOGLE_CLIENT_ID","VITE_RECAPTCHA_SITE_KEY"].includes(t))try{const a=await e.from("public_client_keys").select("key_value").eq("key_name",t).maybeSingle();if(r=a.data,i=a.error,i)h.warn(`Public client key query failed for ${t}`,"SecureConfigService");else if(null==r?void 0:r.key_value)return h.info(`Found ${t} in public_client_keys table`,"SecureConfigService"),r.key_value}catch(n){h.warn(`Failed to fetch public client key for ${t}`,"SecureConfigService")}if("GOOGLE_CLIENT_ID"===t&&window.location.hostname.includes("github.io")){const e="486123633428-14f8o50husb82sho688e0qvc962ucr4n.apps.googleusercontent.com";return h.info(`Using hardcoded ${t} for GitHub Pages`,"SecureConfigService"),e}return h.error(`Could not find ${t} in any table`,"SecureConfigService"),null}async getUserPersonalApiKey(t){try{const r=await this.getUserId();if(!r)return null;const i=new Promise((e,t)=>{setTimeout(()=>t(new Error("API request timeout")),3e3)}),a=e.from("app_configs").select("key_value").eq("key_name",t).eq("owner_id",r).single().then(e=>{var t;return e.error?null:(null==(t=e.data)?void 0:t.key_value)||null});return Promise.race([a,i]).catch(()=>null)}catch(r){return h.error(`Error fetching personal API key: ${t}`,"SecureConfigService",{},r),null}}async setApiKey(t,r){try{const i=await this.getUserId();if(!i)return h.error("No user ID available for API key setting","SecureConfigService"),!1;let a;return a=["GOOGLE_CLIENT_ID","VITE_RECAPTCHA_SITE_KEY"].includes(t)?(await e.from("public_client_keys").upsert({key_name:t,key_value:r,owner_id:i})).error:(await e.from("app_configs").upsert({key_name:t,key_value:r,owner_id:i,updated_by:i,is_sensitive:!0})).error,a?(h.error(`Failed to set API key: ${t}`,"SecureConfigService",{error:a}),!1):(this.setCacheValue(t,r),!0)}catch(i){return h.error(`Error setting API key: ${t}`,"SecureConfigService",{},i),!1}}async getUserId(){var t;try{const r=await e.auth.getUser();if(!(null==(t=r.data.user)?void 0:t.id))return null;const{data:i}=await e.from("admin_users").select("id").eq("user_id",r.data.user.id).single();return(null==i?void 0:i.id)||null}catch(r){return null}}clearCache(){this.apiKeysCache.clear(),this.cacheExpiry.clear();try{for(let e=0;e<localStorage.length;e++){const t=localStorage.key(e);((null==t?void 0:t.startsWith(m))||(null==t?void 0:t.startsWith(g)))&&localStorage.removeItem(t)}}catch(e){}}async hasApiKey(e){return null!==await this.getApiKey(e)}}const S=f.getInstance(),y={isEnabled:!1,message:"System is under maintenance. Please try again later.",allowedEmails:[],updatedAt:(new Date).toISOString(),updatedBy:"system",updatedByName:"System"},w="quizai_maintenance_settings";class v{constructor(){this.cache=null,this.cacheExpiry=0,this.CACHE_DURATION=18e5,this.REQUEST_TIMEOUT=3e3,this.MAX_RETRIES=2,this.isFetching=!1,this.lastErrorTime=0,this.consecutiveErrors=0,this.viewExists=null}static getInstance(){return v.instance||(v.instance=new v),v.instance}isCacheValid(){return Boolean(this.cache&&Date.now()<this.cacheExpiry)}shouldBackoff(){if(this.consecutiveErrors>0){const e=Math.min(2**(this.consecutiveErrors-1)*5e3,6e4);return Date.now()-this.lastErrorTime<e}return!1}getLocalSettings(){try{const e=localStorage.getItem(w);return e?JSON.parse(e):null}catch(e){return h.error("Error parsing local maintenance settings","MaintenanceService",{},e),null}}saveLocalSettings(e){try{localStorage.setItem(w,JSON.stringify(e))}catch(t){h.error("Error saving maintenance settings to localStorage","MaintenanceService",{},t)}}async checkViewExists(){var t;if(null!==this.viewExists)return this.viewExists;try{const{error:r}=await e.from("maintenance_settings_view").select("is_enabled").limit(1);return r?(null==(t=r.message)?void 0:t.includes("does not exist"))?(this.viewExists=!1,h.warn("maintenance_settings_view does not exist, using localStorage fallback","MaintenanceService"),!1):(h.warn("Error checking view existence, assuming it exists","MaintenanceService",{},r),this.viewExists=!0,!0):(this.viewExists=!0,!0)}catch(r){return h.error("Exception checking view existence","MaintenanceService",{},r),this.viewExists=!1,!1}}async getMaintenanceSettings(){if(this.isCacheValid())return this.cache;if(this.isFetching||this.shouldBackoff())return this.getLocalSettings()||y;try{this.isFetching=!0;const t=new Promise((e,t)=>{setTimeout(()=>t(new Error("Maintenance settings request timeout")),this.REQUEST_TIMEOUT)});let r=null,i=0,a=null;for(;i<=this.MAX_RETRIES&&!r;)try{i>0&&await new Promise(e=>setTimeout(e,2**i*300)),r=await Promise.race([this._fetchMaintenanceSettings(),t]),this.consecutiveErrors=0;break}catch(e){if(a=e,i++,i>this.MAX_RETRIES){this.consecutiveErrors++,this.lastErrorTime=Date.now(),h.warn(`Failed to fetch maintenance settings after ${this.MAX_RETRIES+1} attempts, checking localStorage`,"MaintenanceService",{},a);const e=this.getLocalSettings();if(e)return h.info("Using maintenance settings from localStorage","MaintenanceService"),e;r=y}}return r||y}finally{this.isFetching=!1}}async _fetchMaintenanceSettings(){try{if(!(await this.checkViewExists())){try{const{data:t}=await e.from("app_configs").select("key_value").eq("key_name","maintenance.enabled").single(),{data:r}=await e.from("app_configs").select("key_value").eq("key_name","maintenance.message").single(),{data:i}=await e.from("app_configs").select("key_value").eq("key_name","maintenance.allowed_emails").single();if(t&&r){const e={isEnabled:"true"===t.key_value,message:r.key_value||y.message,allowedEmails:i?JSON.parse(i.key_value):[],updatedAt:(new Date).toISOString(),updatedBy:"system",updatedByName:"System"};return this.cache=e,this.cacheExpiry=Date.now()+this.CACHE_DURATION,this.saveLocalSettings(e),e}}catch(t){h.warn("Failed to fetch maintenance settings from app_configs directly","MaintenanceService")}const r=this.getLocalSettings();return r?(h.info("Using maintenance settings from localStorage (view missing)","MaintenanceService"),r):y}const{data:r,error:i}=await e.from("maintenance_settings_view").select("*").single();if(i){if("PGRST116"===i.code)return this.getLocalSettings()||y;h.error("Failed to fetch maintenance settings from database","MaintenanceService",{error:i});const e=this.getLocalSettings();return e?(h.info("Using maintenance settings from localStorage after database error","MaintenanceService"),e):y}const a={isEnabled:!0===r.is_enabled,message:r.message||y.message,allowedEmails:("string"==typeof r.allowed_emails?JSON.parse(r.allowed_emails):r.allowed_emails)||[],updatedAt:r.updated_at||(new Date).toISOString(),updatedBy:r.updated_by||"system",updatedByName:r.updated_by_name||"System",updatedByEmail:r.updated_by_email||void 0};return this.cache=a,this.cacheExpiry=Date.now()+this.CACHE_DURATION,this.saveLocalSettings(a),a}catch(r){h.error("Error fetching maintenance settings","MaintenanceService",{},r);const e=this.getLocalSettings();return e?(h.info("Using maintenance settings from localStorage after exception","MaintenanceService"),e):y}}async isMaintenanceMode(){try{const e=await this.getMaintenanceSettings();return(null==e?void 0:e.isEnabled)||!1}catch(e){return h.error("Error checking maintenance mode","MaintenanceService",{},e),!1}}async isUserAllowed(e){try{const t=await this.getMaintenanceSettings();return!(null==t?void 0:t.isEnabled)||!!e&&t.allowedEmails.includes(e)}catch(t){return h.error("Error checking user access during maintenance","MaintenanceService",{},t),!1}}async updateMaintenanceSettings(t,r,i,a,s){try{const o={isEnabled:t,message:r,allowedEmails:i,updatedAt:(new Date).toISOString(),updatedBy:a,updatedByName:s};this.saveLocalSettings(o);const c=await this.getAdminId(a);if(c)try{const a=[e.from("app_configs").update({key_value:t.toString(),updated_by:c}).eq("key_name","maintenance.enabled"),e.from("app_configs").update({key_value:r,updated_by:c}).eq("key_name","maintenance.message"),e.from("app_configs").update({key_value:JSON.stringify(i),updated_by:c}).eq("key_name","maintenance.allowed_emails")];(await Promise.all(a)).some(e=>e.error)&&h.warn("Failed to update some maintenance settings in database, but saved to localStorage","MaintenanceService")}catch(n){h.warn("Exception updating maintenance settings in database, but saved to localStorage","MaintenanceService",{},n)}else h.warn("Could not find admin ID to update maintenance settings, saved to localStorage only","MaintenanceService");return this.cache=o,this.cacheExpiry=Date.now()+this.CACHE_DURATION,h.info("Maintenance settings updated","MaintenanceService",{isEnabled:t,updatedBy:a}),!0}catch(o){return h.error("Error updating maintenance settings","MaintenanceService",{},o),!1}}async getAdminId(t){try{const{data:r}=await e.from("auth.users").select("id").eq("email",t).single();if(!r)return null;const{data:i,error:a}=await e.from("admin_users").select("id").eq("user_id",r.id).eq("is_active",!0).single();return a||!i?null:i.id}catch{return null}}clearCache(){this.cache=null,this.cacheExpiry=0,this.consecutiveErrors=0,this.viewExists=null}}const _=v.getInstance();var E=(e=>(e[e.CLOSED=0]="CLOSED",e[e.OPEN=1]="OPEN",e[e.HALF_OPEN=2]="HALF_OPEN",e))(E||{});const I={},q="admin_service_cache",z=(A={failureThreshold:3,resetTimeout:3e4,halfOpenSuccessThreshold:1},I[b="adminService"]||(I[b]=new class{constructor(e,t){this.state=0,this.failureCount=0,this.successCount=0,this.lastError=null,this.nextAttemptTime=0,this.serviceKey=e,this.options={failureThreshold:(null==t?void 0:t.failureThreshold)||5,resetTimeout:(null==t?void 0:t.resetTimeout)||3e4,halfOpenSuccessThreshold:(null==t?void 0:t.halfOpenSuccessThreshold)||2}}async execute(e){var t;if(1===this.state){if(Date.now()<this.nextAttemptTime)throw h.warn(`Circuit for ${this.serviceKey} is OPEN. Call rejected.`,"CircuitBreaker",{nextAttempt:new Date(this.nextAttemptTime).toISOString()}),new Error(`Circuit for ${this.serviceKey} is open. Last error: ${(null==(t=this.lastError)?void 0:t.message)||"Service unavailable"}`);this.state=2,this.successCount=0}try{const t=await e();return this.handleSuccess(),t}catch(r){throw this.handleFailure(r),r}}handleSuccess(){2===this.state?(this.successCount++,this.successCount>=this.options.halfOpenSuccessThreshold&&(this.state=0,this.failureCount=0,this.successCount=0)):0===this.state&&this.failureCount>0&&(this.failureCount=0)}handleFailure(e){this.lastError=e,2===this.state?(this.state=1,this.nextAttemptTime=Date.now()+this.options.resetTimeout,h.warn(`Circuit for ${this.serviceKey} REOPENED due to failure in HALF_OPEN state. Reset timeout: ${this.options.resetTimeout}ms`,"CircuitBreaker",{error:e.message})):0===this.state&&(this.failureCount++,this.failureCount>=this.options.failureThreshold&&(this.state=1,this.nextAttemptTime=Date.now()+this.options.resetTimeout,h.error(`Circuit for ${this.serviceKey} OPENED after ${this.failureCount} consecutive failures. Reset timeout: ${this.options.resetTimeout}ms`,"CircuitBreaker")))}getState(){return this.state}reset(){this.state=0,this.failureCount=0,this.successCount=0,this.nextAttemptTime=0}}(b,A)),I[b]);var b,A;class T{constructor(){this.cache=new Map,this.CACHE_DURATION=864e5,this.pendingRequests=new Map,this.loadCacheFromLocalStorage()}loadCacheFromLocalStorage(){try{const e=localStorage.getItem(q);if(e){const t=JSON.parse(e);Object.entries(t).forEach(([e,t])=>{this.cache.set(e,t)}),this.cleanExpiredCache()}}catch(e){h.warn("Failed to load admin cache from localStorage","AdminService")}}saveToLocalStorage(){try{const e={};this.cache.forEach((t,r)=>{e[r]=t}),localStorage.setItem(q,JSON.stringify(e))}catch(e){h.warn("Failed to save admin cache to localStorage","AdminService")}}cleanExpiredCache(){const e=Date.now();let t=!1;this.cache.forEach((r,i)=>{e>r.expiry&&(this.cache.delete(i),t=!0)}),t&&this.saveToLocalStorage()}static getInstance(){return T.instance||(T.instance=new T),T.instance}async isAdmin(e){if(!e)return!1;const t=`isAdmin:${e}`;if(this.pendingRequests.has(t))return this.pendingRequests.get(t);const r=this.cache.get(e);if(r&&Date.now()<r.expiry)return r.isAdmin;const i=this.checkAdminStatus(e);return this.pendingRequests.set(t,i),i.then(()=>this.pendingRequests.delete(t)).catch(()=>this.pendingRequests.delete(t)),i}async checkAdminStatus(t){try{if(z.getState()===E.OPEN){h.warn("Admin service circuit open, using cached value","AdminService",{userEmail:t});const e=this.cache.get(t);return!!e&&e.isAdmin}const r=new Promise((e,t)=>{setTimeout(()=>t(new Error("Admin check timed out")),3e3)}),i=z.execute(async()=>{const{data:r,error:i}=await e.from("admin_users").select("role").eq("user_email",t).eq("is_active",!0).single();if(i){if("PGRST116"===i.code)return!1;throw i}const a=!!r,s=(null==r?void 0:r.role)||null;return this.setCacheValue(t,a,s),a});return Promise.race([i,r]).catch(e=>{h.warn("Admin check timed out or failed","AdminService",{userEmail:t});const r=this.cache.get(t);return!!r&&r.isAdmin})}catch(r){return h.error("Error checking admin status","AdminService",{userEmail:t},r),!1}}async getAdminRole(e){if(!e)return null;const t=`role:${e}`;if(this.pendingRequests.has(t))return this.pendingRequests.get(t);const r=this.cache.get(e);if(r&&Date.now()<r.expiry)return r.role;const i=this.fetchAdminRole(e);return this.pendingRequests.set(t,i),i.then(()=>this.pendingRequests.delete(t)).catch(()=>this.pendingRequests.delete(t)),i}async fetchAdminRole(t){try{if(z.getState()===E.OPEN){h.warn("Admin service circuit open, using cached value for role","AdminService",{userEmail:t});const e=this.cache.get(t);return e?e.role:null}const r=new Promise((e,t)=>{setTimeout(()=>t(new Error("Admin role fetch timed out")),3e3)}),i=z.execute(async()=>{const{data:r,error:i}=await e.from("admin_users").select("role").eq("user_email",t).eq("is_active",!0).single();if(i){if("PGRST116"===i.code)return null;throw i}const a=!!r,s=(null==r?void 0:r.role)||null;return this.setCacheValue(t,a,s),s});return Promise.race([i,r]).catch(e=>{h.warn("Admin role fetch timed out or failed","AdminService",{userEmail:t});const r=this.cache.get(t);return r?r.role:null})}catch(r){return h.error("Error fetching admin role","AdminService",{userEmail:t},r),null}}setCacheValue(e,t,r){this.cache.set(e,{isAdmin:t,role:r||"",expiry:Date.now()+this.CACHE_DURATION}),this.saveToLocalStorage()}isSuperAdmin(e){if(!e)return!1;const t=this.cache.get(e);return!!t&&"super_admin"===t.role}clearCache(){this.cache.clear();try{localStorage.removeItem(q)}catch(e){h.warn("Failed to clear admin cache from localStorage","AdminService")}}clearUserCache(e){this.cache.delete(e),this.saveToLocalStorage()}}const k=T.getInstance();class x{static check(){const e=window.location.hostname;return{isProduction:"localhost"!==e&&!e.includes("127.0.0.1")&&!e.includes("192.168"),hostname:e,supabaseConfigured:!0,googleConfigured:!!window.google}}}class C{constructor(e,t){this.supabase=e,this.supabaseService=t,this.name="FullIntegration"}canHandle(e){return e.supabaseConfigured&&e.googleConfigured}async authenticate(e){var t,r;try{h.info("Attempting OAuth authentication with Supabase","AuthStrategy");try{const{data:i,error:a}=await this.supabase.auth.signInWithOAuth({provider:"google",options:{redirectTo:window.location.origin+(window.location.pathname.includes("signin")?window.location.pathname:"/#/signin"),queryParams:{access_type:"offline",prompt:"consent"}}});if(a)throw h.error("Supabase OAuth initiation failed","AuthStrategy",{code:a.code,message:a.message}),a;if(null==i?void 0:i.url)return h.info("Redirecting to Supabase OAuth URL","AuthStrategy",{url:i.url.substring(0,50)+"..."}),window.location.href=i.url,null;const s=await this.supabase.auth.getSession();if(null==(r=null==(t=null==s?void 0:s.data)?void 0:t.session)?void 0:r.user){const t=s.data.session.user;return h.info("Got Supabase session after OAuth","AuthStrategy",{userId:t.id}),await this.handleUserProfile(e,t)}throw h.error("No session after OAuth","AuthStrategy"),new Error("No session after OAuth")}catch(i){throw h.error("OAuth authentication failed, falling back to Google only auth","AuthStrategy",{},i),i}}catch(i){throw h.error("Authentication failed","AuthStrategy",{},i),i}}extractBestToken(e){return e.credential&&this.isValidJWT(e.credential)?(h.info("Using credential token from Google response","AuthStrategy"),e.credential):e.idToken&&this.isValidJWT(e.idToken)?(h.info("Using idToken from Google response","AuthStrategy"),e.idToken):e.id_token&&this.isValidJWT(e.id_token)?(h.info("Using id_token from Google response","AuthStrategy"),e.id_token):e.access_token&&this.isValidJWT(e.access_token)?(h.info("Using access_token from Google response","AuthStrategy"),e.access_token):e.accessToken&&this.isValidJWT(e.accessToken)?(h.info("Using accessToken from Google response","AuthStrategy"),e.accessToken):(h.warn("No valid token found in Google response","AuthStrategy",{hasCredential:!!e.credential,hasIdToken:!!e.idToken,hasId_Token:!!e.id_token,hasAccessToken:!!e.accessToken,responseType:typeof e,keys:Object.keys(e)}),null)}isValidJWT(e){return"string"==typeof e&&e.startsWith("eyJ")&&3===e.split(".").length}async handleUserProfile(e,t){const r=e.email;try{let i=await this.supabaseService.getUserByEmail(r);if(i){const r=await this.supabaseService.updateUser(i.id,{name:e.name||e.given_name||e.family_name,imageUrl:e.picture})||i;return r.accessToken=e.access_token,r.idToken=e.credential||e.idToken,r.supabaseId=t.id,r}{const i={id:t.id,supabaseId:t.id,email:r,name:e.name||e.given_name||e.family_name,imageUrl:e.picture,accessToken:e.access_token,idToken:e.credential||e.idToken},a=await this.supabaseService.createUser(i);if(!a)throw h.error("Failed to create new user profile","AuthStrategy",{email:r}),new Error("Failed to create new user profile");return a}}catch(i){throw h.error("Failed to handle user profile","AuthStrategy",{email:r},i),i}}}class P{constructor(){this.name="GoogleOnly"}canHandle(e){return e.googleConfigured}async authenticate(e){try{if(!e.email)throw h.error("No email provided by Google OAuth","AuthStrategy"),new Error("No email provided by Google OAuth");return{id:e.sub||e.id,email:e.email,name:e.name||e.given_name||e.family_name,imageUrl:e.picture,accessToken:e.access_token,idToken:e.credential||e.idToken}}catch(t){return h.error("Google-only authentication failed","AuthStrategy",{},t),null}}}class O{constructor(e,t){this.strategies=[],this.strategies=[new C(e,t),new P]}async authenticate(e){const t=x.check();for(const i of this.strategies)if(i.canHandle(t))try{const t=await i.authenticate(e);if(t)return t}catch(r){h.warn(`Strategy ${i.name} failed, trying next strategy`,"AuthManager",{error:r.message});continue}return h.error("All authentication strategies failed","AuthManager"),null}}const U=new class{constructor(){this.authManager=new O(e,t)}async signInWithGoogle(e){try{if(!e.email)throw h.error("No email provided by Google OAuth","AuthService"),new Error("No email provided by Google OAuth");await this.performHealthCheck();const t=await this.authManager.authenticate(e);if(!t)throw new Error("Authentication failed. Please try again or contact support.");if(!t.supabaseId)throw h.error("Authentication failed - Supabase integration required","AuthService",{userId:t.id,email:t.email}),new Error("Full authentication required. Please try again or contact support.");return t}catch(t){return h.error("Sign in failed","AuthService",{},t),null}}async signOut(){try{return await e.auth.signOut(),!0}catch(t){return h.error("Failed to sign out","AuthService",{},t),!1}}async getCurrentSession(){try{const{data:{session:t}}=await e.auth.getSession();return t}catch(t){return h.error("Failed to get current session","AuthService",{},t),null}}isProduction(){return"localhost"!==window.location.hostname&&!window.location.hostname.includes("127.0.0.1")&&!window.location.hostname.includes("192.168")}async performHealthCheck(){try{const{error:t}=await e.from("users").select("count").limit(1);t&&h.warn("Supabase health check failed","AuthService",{error:t.message,code:t.code,hint:t.hint})}catch(t){h.error("Supabase connection error during health check","AuthService",{},t)}}async testSupabaseConnectivity(r){var i,a,s,n,o;try{const{data:{session:l}}=await e.auth.getSession(),u=!!(null==l?void 0:l.user),d=l?{userId:null==(i=l.user)?void 0:i.id,email:null==(a=l.user)?void 0:a.email,provider:null==(n=null==(s=l.user)?void 0:s.app_metadata)?void 0:n.provider,lastSignIn:null==(o=l.user)?void 0:o.last_sign_in_at}:null;let m=!1;try{const{error:t}=await e.from("users").select("count").limit(1);m=!t}catch(c){h.error("Basic connectivity test error","AuthService",{},c)}let g=!1,p=!1,f=null;try{const e=await t.getUserByEmail(r);g=!0,p=!!e,f=e?{id:e.id,email:e.email,name:e.name,supabaseId:e.supabaseId}:null}catch(c){h.error("Users table read test error","AuthService",{},c)}let S=!1;try{const{error:t}=await e.from("quizzes").select("count").limit(1);S=!t}catch(c){h.error("Quizzes table read test error","AuthService",{},c)}return{canConnect:m,hasSession:u,canReadUsers:g,canReadQuizzes:S,userExists:p,userDetails:f,sessionDetails:d}}catch(c){const e=c.message;return h.error("Supabase connectivity test failed","AuthService",{email:r},c),{canConnect:!1,hasSession:!1,canReadUsers:!1,canReadQuizzes:!1,userExists:!1,error:e}}}},R=async(r,i)=>{if(!i)throw new Error("User must be logged in to share quizzes");const{data:{user:a},error:s}=await e.auth.getUser();let n;if(a&&!s)n=a.id;else{if(!i.supabaseId)throw h.error("User authentication incomplete - missing Supabase session","quizSharingService",{quizId:r.id,googleUserId:i.id,hasSupabaseId:!!i.supabaseId,sessionError:null==s?void 0:s.message,hint:"Full authentication with Supabase is required for sharing features"}),new Error("User must be properly authenticated with Supabase to share quizzes");n=i.supabaseId}try{const e=await t.getExistingShareUrl(r.id);if(e)return h.info("Retrieved existing share URL","quizSharingService",{quizId:r.id}),{shareUrl:e};let a=await t.getUserById(n);a||(h.info("User not found in Supabase, creating user first","quizSharingService",{userId:n}),a=await t.createUser({...i,id:n})),(await t.getUserQuizzes(n)).find(e=>e.id===r.id)?(h.info("Quiz already exists in Supabase, updating it","quizSharingService",{quizId:r.id}),await t.updateQuiz(r)):(h.info("Quiz does not exist in Supabase, creating it","quizSharingService",{quizId:r.id}),await t.createQuiz(r,n));const s=await t.shareQuiz(r.id,!0,void 0,n);if(!s)throw new Error("Failed to create share entry in Supabase");return h.info("Quiz shared successfully","quizSharingService",{quizId:r.id,shareUrl:s.shareUrl,shareToken:s.shareToken}),{shareUrl:s.shareUrl}}catch(o){throw h.error("Failed to share quiz","quizSharingService",{quizId:r.id},o),o}},D=async(i,a)=>{i&&r(i)||h.warn("Invalid quiz ID provided to getSharedQuiz","quizSharingService",{quizId:i}),h.info("Fetching shared quiz from Supabase","quizSharingService",{quizId:i});const s=await t.getPublicQuizById(i);if(s)return h.info("Quiz found as public quiz in Supabase","quizSharingService",{quizId:i}),s.title&&""!==s.title.trim()||(s.title="Shared Quiz",h.info("Updated empty quiz title with fallback","quizSharingService",{quizId:i})),s;if(a){h.info("Checking user's own quizzes","quizSharingService",{quizId:i,hasSupabaseId:!!a.supabaseId,googleUserId:a.id});const{data:{user:r},error:s}=await e.auth.getUser();let n=null;if(r&&!s?n=r.id:a.supabaseId&&(n=a.supabaseId),n){const e=(await t.getUserQuizzes(n)).find(e=>e.id===i);if(e)return h.info("Quiz found in user Supabase quizzes","quizSharingService",{quizId:i}),e.title&&""!==e.title.trim()||(e.title="Shared Quiz",h.info("Updated empty user quiz title with fallback","quizSharingService",{quizId:i})),{...e,creator:{name:a.name||"Unknown",email:a.email||void 0},isShared:!0,sharedTimestamp:(new Date).toISOString()}}}return h.warn("Quiz not found in Supabase - may be an orphaned share link or expired quiz","quizSharingService",{quizId:i,suggestion:"Check if the quiz was deleted or if there are data consistency issues"}),null},N=Object.freeze(Object.defineProperty({__proto__:null,getSharedQuiz:D,shareQuizViaAPI:R},Symbol.toStringTag,{value:"Module"}));class M{constructor(e=0,t="Network Error"){this.status=e,this.text=t}}const L={origin:"https://api.emailjs.com",blockHeadless:!1,storageProvider:(()=>{if("undefined"!=typeof localStorage)return{get:e=>Promise.resolve(localStorage.getItem(e)),set:(e,t)=>Promise.resolve(localStorage.setItem(e,t)),remove:e=>Promise.resolve(localStorage.removeItem(e))}})()},$=async(e,t,r,i)=>{const a=(e=>e?"string"==typeof e?{publicKey:e}:"[object Object]"===e.toString()?e:{}:{})(i),s=a.publicKey||L.publicKey,n=a.blockHeadless||L.blockHeadless,o=a.storageProvider||L.storageProvider,c={...L.blockList,...a.blockList},l={...L.limitRate,...a.limitRate};if(n&&((u=navigator).webdriver||!u.languages||0===u.languages.length))return Promise.reject(new M(451,"Unavailable For Headless Browser"));var u;if(((e,t,r)=>{if(!e||"string"!=typeof e)throw"The public key is required. Visit https://dashboard.emailjs.com/admin/account";if(!t||"string"!=typeof t)throw"The service ID is required. Visit https://dashboard.emailjs.com/admin";if(!r||"string"!=typeof r)throw"The template ID is required. Visit https://dashboard.emailjs.com/admin/templates"})(s,e,t),(e=>{if(e&&"[object Object]"!==e.toString())throw"The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/"})(r),r&&((e,t)=>{if((e=>{var t;return!(null==(t=e.list)?void 0:t.length)||!e.watchVariable})(e))return!1;((e,t)=>{if(!Array.isArray(e))throw"The BlockList list has to be an array";if("string"!=typeof t)throw"The BlockList watchVariable has to be a string"})(e.list,e.watchVariable);const r=(i=t,a=e.watchVariable,i instanceof FormData?i.get(a):i[a]);var i,a;return"string"==typeof r&&e.list.includes(r)})(c,r))return Promise.reject(new M(403,"Forbidden"));if(await(async(e,t,r)=>{if(!t.throttle||!r)return!1;((e,t)=>{if("number"!=typeof e||e<0)throw"The LimitRate throttle has to be a positive number";if(t&&"string"!=typeof t)throw"The LimitRate ID has to be a non-empty string"})(t.throttle,t.id);const i=t.id||e,a=await(async(e,t,r)=>{const i=Number(await r.get(e)||0);return t-Date.now()+i})(i,t.throttle,r);return a>0||(await r.set(i,Date.now().toString()),!1)})(location.pathname,l,o))return Promise.reject(new M(429,"Too Many Requests"));const d={lib_version:"4.4.1",user_id:s,service_id:e,template_id:t,template_params:r};return(async(e,t,r={})=>{const i=await fetch(L.origin+e,{method:"POST",headers:r,body:t}),a=await i.text(),s=new M(i.status,a);if(i.ok)return s;throw s})("/api/v1.0/email/send",JSON.stringify(d),{"Content-type":"application/json"})},Q=new class{constructor(){this.ADMIN_EMAIL="teosushi1014@gmail.com",this.EMAILJS_SERVICE_ID="service_ca3qx8o",this.EMAILJS_TEMPLATE_ID="template_yk32a0i",this.EMAILJS_AUTO_REPLY_TEMPLATE_ID="template_zxpohea",this.EMAILJS_PUBLIC_KEY="3PkkqTaNztt7DEKdi"}getSimpleTemplateParams(e,t){return{name:e.userName,email:e.userEmail,message:e.message,title:`New Contact Message from ${e.userName}`,message_id:t,timestamp:(new Date).toLocaleString("vi-VN",{timeZone:"Asia/Ho_Chi_Minh"}),from_name:e.userName,from_email:e.userEmail,reply_to:e.userEmail}}getAutoReplyTemplateParams(e,t){return{to_name:e.userName,to_email:e.userEmail,user_name:e.userName,user_email:e.userEmail,to:e.userEmail,name:e.userName,email:e.userEmail,message_id:t,timestamp:(new Date).toLocaleString("vi-VN",{timeZone:"Asia/Ho_Chi_Minh"}),admin_email:this.ADMIN_EMAIL,app_name:"QuizAI",app_url:window.location.origin}}async sendContactMessage(t){try{const{data:a,error:s}=await e.from("contact_messages").insert([{user_email:t.userEmail,user_name:t.userName,message:t.message,user_id:t.userId||null,created_at:(new Date).toISOString()}]).select().single();if(s)return h.error("Failed to save contact message","EmailService",{error:s.message,code:s.code}),"42P01"===s.code&&this.saveToLocalStorage(t);let n=!1;try{await this.sendEmailNotificationToAdmin(t,a.id),n=!0}catch(r){h.error("Failed to send admin email notification","EmailService",{willUseFallback:!0,messageStillSaved:!0},r),n=!1}let o=!1;try{await this.sendAutoReplyToUser(t,a.id),o=!0}catch(i){h.error("Failed to send auto-reply email to user","EmailService",{willContinueAnyway:!0,messageStillSaved:!0,adminEmailStatus:n?"sent":"failed"},i),o=!1}return!0}catch(a){return h.error("Error sending contact message","EmailService",{},a),this.saveToLocalStorage(t)}}async sendEmailNotificationToAdmin(e,t){try{const r=this.getSimpleTemplateParams(e,t),i=await $(this.EMAILJS_SERVICE_ID,this.EMAILJS_TEMPLATE_ID,r,this.EMAILJS_PUBLIC_KEY);if(200!==i.status)throw new Error(`EmailJS failed with status: ${i.status}, text: ${i.text}`)}catch(r){const i=r;h.error("Error in sendEmailNotificationToAdmin","EmailService",{errorMessage:i.message,errorStatus:i.status,errorText:i.text,errorResponse:i.response},r);const a={to_email:this.ADMIN_EMAIL,from_name:e.userName,from_email:e.userEmail,message:e.message,message_id:t,timestamp:(new Date).toLocaleString("vi-VN",{timeZone:"Asia/Ho_Chi_Minh"}),app_url:window.location.origin};throw this.sendMailtoFallback(a),r}}async sendAutoReplyToUser(e,t){try{const r=this.getAutoReplyTemplateParams(e,t);if(!e.userEmail||!e.userEmail.includes("@"))throw new Error(`Invalid recipient email: ${e.userEmail}`);const i=await $(this.EMAILJS_SERVICE_ID,this.EMAILJS_AUTO_REPLY_TEMPLATE_ID,r,this.EMAILJS_PUBLIC_KEY);if(200!==i.status)throw new Error(`EmailJS auto-reply failed with status: ${i.status}, text: ${i.text}`)}catch(r){throw h.error("Error in sendAutoReplyToUser","EmailService",{recipientEmail:e.userEmail,messageId:t},r),r}}sendMailtoFallback(e){try{const t=encodeURIComponent("New Contact Message"),r=encodeURIComponent(`From: ${e.from_name} (${e.from_email})\nMessage ID: ${e.message_id}\nTime: ${e.timestamp}\n\n${e.message}\n\n---\nThis is a fallback email. The original message is saved in the database.\nView in app: ${e.app_url}`),i=`mailto:${e.to_email}?subject=${t}&body=${r}`;window.open(i,"_blank")}catch(t){h.error("Error in sendMailtoFallback","EmailService",{},t)}}saveToLocalStorage(e){try{const t=this.getLocalMessages();return t.push({...e,id:`local_${Date.now()}`,created_at:(new Date).toISOString()}),localStorage.setItem("contact_messages",JSON.stringify(t)),!0}catch(t){return h.error("Error saving to localStorage","EmailService",{},t),!1}}getLocalMessages(){try{const e=localStorage.getItem("contact_messages");return e?JSON.parse(e):[]}catch(e){return h.error("Error reading from localStorage","EmailService",{},e),[]}}clearLocalMessages(){try{localStorage.removeItem("contact_messages")}catch(e){h.error("Error clearing localStorage","EmailService",{},e)}}},F="quizzes",G={name:F,storeName:"quiz_data"},J=a.createInstance(G),V=new class{async getAllQuizzes(){try{const e=await J.getItem(F)||[],t=i(e);return t.length!==e.length&&await this.saveQuizzes(t),t}catch(e){return h.error("Failed to get quizzes from storage","QuizStorage",{},e),[]}}async saveQuizzes(e){try{h.info("Saving quizzes to storage","QuizStorage",{count:e.length}),await J.setItem(F,e)}catch(t){throw h.error("Failed to save quizzes to storage","QuizStorage",{},t),t}}async clearQuizzes(){try{h.info("Clearing all quizzes from storage","QuizStorage"),await J.removeItem(F)}catch(e){throw h.error("Failed to clear quizzes from storage","QuizStorage",{},e),e}}};"undefined"!=typeof window&&(n.workerSrc="https://esm.sh/pdfjs-dist@4.4.168/build/pdf.worker.min.js");const B=async e=>{const t=await e.arrayBuffer(),r=await s({data:t}).promise;let i="";for(let a=1;a<=r.numPages;a++){const e=await r.getPage(a);i+=(await e.getTextContent()).items.map(e=>"str"in e?e.str:"").join(" ")+"\n"}return i},j=async e=>{const t=await e.arrayBuffer();return(await o.extractRawText({arrayBuffer:t})).value},K=e=>new Promise((t,r)=>{const i=new FileReader;i.onload=()=>{const e=i.result.split(",");if(2!==e.length)return void r(new Error("Invalid file data for base64 conversion"));const a=e[0].split(":")[1].split(";")[0];t({base64Data:e[1],mimeType:a})},i.onerror=e=>r(e),i.readAsDataURL(e)});let H=null;const Y=async()=>(H||(H=new c({apiKey:"AIzaSyDuIy1MypQWQJl-3xGBbjR05tZXHS1SSUQ"}),h.info("Successfully initialized Google Gemini client","GeminiServiceInit")),H),W=async(e,t,r)=>{const i="string"==typeof e&&"Generate quiz from user prompt."===e&&t.customUserPrompt&&t.customUserPrompt.trim().length>0,a=await Y(),{requestContents:s,sourceContentSnippet:n,systemInstructionString:o}=((e,t,r)=>{let i="";const a=[],s=t.language||"English",n=d("Vietnamese"===s?"vi":"en"),o={Easy:n("step2DifficultyEasy"),Medium:n("step2DifficultyMedium"),Hard:n("step2DifficultyHard"),"AI-Determined":n("step2DifficultyAIDetermined")},c=o[t.difficulty]||o["AI-Determined"],l=t.numQuestions>0?t.numQuestions.toString():n("step2NumQuestionsAIPlaceholder");let u="You are an expert quiz creator. Your task is to create a high-quality quiz based on the provided content.\n\n";var h;return u+=`${n("step1PasteTextLabel")}\n\n`,u+=`${n("step2DifficultyLabel")}: ${c}\n`,u+=`${n("step2NumQuestionsLabel")}: ${l}\n\n`,u+=`${n("step2LanguageLabel")}: ${s}\n\n`,u+="REQUIREMENTS:\n",u+="- Use Markdown formatting throughout for better readability.\n",u+="- EVERY question MUST have EXACTLY 4 multiple choice options (A, B, C, D).\n",u+="- Present questions in clear, concise language.\n",u+="- Provide detailed explanations for answers that teach the concept.\n\n",u+="FORMATTED QUIZ DETECTION:\n",u+='- CRITICAL INSTRUCTION: If the content contains a properly formatted multiple-choice quiz (like "Question 1: 1+1=? A. 2 B. 3 C. 4 D. 5"), use that quiz EXACTLY as provided.\n',u+="- DO NOT create new questions or modify existing ones if a formatted quiz is detected.\n",u+="- Preserve the exact wording of all questions and options (A, B, C, D).\n",u+='- Keep question numbering and formatting exactly as in the original (e.g., "Question 1:" or "Câu 1:").\n',u+='- If correct answers are provided in the original (e.g., with "Answer: A" or similar), use them.\n',u+="- If correct answers are not provided, research to determine and add the correct answers.\n",u+="- Generate explanations only if they're not already included in the original quiz.\n\n",u+="MARKDOWN FORMAT:\n",u+="- Use ### for conceptual question titles (map to 'questionText' in JSON).\n",u+="- Use **bold** for emphasis.\n",u+="- Use proper lists for options conceptually (map to 'options' array in JSON).\n",u+="- Format math with $...$ (inline) and $$...$$ (block).\n",u+="- Use blockquotes > for important notes.\n\n","string"==typeof e&&"Generate quiz from user prompt."===e&&t.customUserPrompt&&t.customUserPrompt.trim().length>0&&t.customUserPrompt?(u+=`USER-PROVIDED PROMPT (PRIMARY SOURCE):\n${t.customUserPrompt.trim()}\n\n`,u+="This is a prompt-only request. The user has not provided any source content. Instead, generate a quiz based ENTIRELY on the user's prompt above.\n",u+="Create appropriate multiple-choice questions that fulfill the requirements in the user's prompt.\n\n"):t.customUserPrompt&&t.customUserPrompt.trim()?u+=`USER-PROVIDED INSTRUCTIONS (OVERRIDE general guidelines if conflicting, otherwise supplement):\n${t.customUserPrompt.trim()}\n\n`:u+="USER-PROVIDED INSTRUCTIONS: No specific user instructions provided. Default quiz generation guidelines apply, strictly adhering to core requirements.\n\n",u+=`Based on the content below, and all prior instructions, create a quiz. The quiz title suggestion is: "${r||"AI Suggested Title"}".\n\n`,u+=`STRICTLY ADHERE to this JSON Output Schema:\n${h=s,`\nCRITICAL JSON Output Schema (MUST follow strictly):\n{\n  "title": "string (creative and relevant quiz title in ${h}, or use original title if preserving a formatted quiz)",\n  "questions": [\n    {\n      "id": "string (unique identifier)",\n      "questionText": "string (formatted using Markdown, including LaTeX for math)",\n      "options": ["string (array of EXACTLY 4 distinct options, properly formatted with Markdown)"],\n      "correctAnswer": "string (must match one of the options exactly)",\n      "explanation": "string (detailed explanation in ${h}, formatted with Markdown)"\n    }\n  ]\n}\n`}\n\n`,u+="CONTENT TO PROCESS:\n","string"==typeof e&&"Generate quiz from user prompt."===e&&t.customUserPrompt&&t.customUserPrompt.trim().length>0&&t.customUserPrompt?(i=`AI Prompt: ${t.customUserPrompt.substring(0,500)}`+(t.customUserPrompt.length>500?"...":""),a.push({text:u})):"string"==typeof e?(i=e.substring(0,500)+(e.length>500?"...":""),a.push({text:`${u}"""${e}"""`})):(i=`Image content (${e.mimeType})`,a.push({text:u}),a.push({inlineData:{data:e.base64Data,mimeType:e.mimeType}})),{requestContents:{parts:a},sourceContentSnippet:i,systemInstructionString:"You are an expert quiz creator for students. Your role is to:\n\n1. Create high-quality multiple choice questions based on the provided content.\n2. Each question MUST have EXACTLY 4 multiple-choice options (A, B, C, D).\n3. Format all content using Markdown syntax for better readability.\n4. For each question, provide:\n   - A clear question text formatted with proper Markdown\n   - Exactly 4 answer options (no more, no less)\n   - The correct answer clearly identified\n   - A detailed explanation that teaches the concept\n   \n5. IMPORTANT ROLE - FORMATTED QUIZ HANDLING: \n   If the user uploads a properly formatted quiz file, you MUST:\n   - Use that quiz EXACTLY as provided without creating new questions\n   - Keep the exact format, content, and options from the original quiz\n   - Preserve all question numbering and formatting (e.g., \"Question 1:\" or \"Câu 1:\")\n   - Preserve all option letters (A, B, C, D) and their exact content\n   - Example: If content has \"Câu 1: 1+1=? A. 2 B. 3 C. 4 D. 5\", output this exact question and options\n   - If answers are provided (e.g., \"Answer: A\"), use them\n   - If answers are not provided, research to add the correct answers\n   - Add explanations for each answer if not already included\n\nIMPORTANT ROLE - FORMAT DETECTION:\nIf the user provides a properly formatted multiple-choice quiz file, you MUST:\n- Use that quiz exactly as provided without creating new questions\n- Keep the format, content, and options exactly the same\n- For example, if the provided content has questions like:\n  \"Question 1: 1+1=?\n   A. 2\n   B. 3\n   C. 4\n   D. 5\"\n  You MUST use these exact questions and options in your output\n- If the correct answers are provided, use them\n- If correct answers are not provided, research and provide the correct answers\n- Never create new questions when a properly formatted quiz is detected\n\nFORMAT REQUIREMENTS:\n- Use Markdown formatting for better readability (e.g., **bold**, *italic*, lists).\n- Use **bold text** for emphasis.\n- Use bullet lists for organizing information.\n- Use > blockquotes for important notes.\n- For math formulas, use proper LaTeX syntax with $...$ for inline and $$...$$ for block equations.\n- NUMBER each question clearly (this is for conceptual structure; the JSON output will have question objects in an array).\n\nEXPECTED OUTPUT FORMAT (This describes the conceptual structure that your JSON output should represent for each question object within the main JSON):\n### Question {number} (This conceptual title should be mapped to the 'questionText' field in the JSON)\n\n{question text with proper markdown} (This is the content for 'questionText' field)\n\nA. {option A} (These are for the 'options' array in JSON)\nB. {option B}\nC. {option C}\nD. {option D}\n\nCorrect Answer: {letter} (The 'correctAnswer' field in JSON should contain the full text of the correct option string, not just the letter)\n\n**Explanation:**\n{detailed explanation using markdown} (This is for the 'explanation' field in JSON)\n\nIMPORTANT REQUIREMENTS FOR JSON:\n- Always create EXACTLY 4 options (A, B, C, D) for each multiple-choice question. These go into the 'options' array.\n- Make sure incorrect options are plausible but clearly incorrect upon analysis.\n- All answers must be mutually exclusive with no ambiguity.\n- Ensure questions test understanding, not just memorization.\n- The entire output MUST be a single, valid JSON object, adhering to the schema specified in the user prompt.\n- All string values (questionText, options, correctAnswer, explanation) must be valid JSON strings, with internal quotes and special characters properly escaped (e.g., \"Option with a \\\"quote\\\"\"). For LaTeX, backslashes must be doubled (e.g., \\\\sqrt{x}).\n- Do not truncate any JSON strings or the overall JSON structure.\n\nUSER CUSTOMIZATION:\nReview the 'USER-PROVIDED INSTRUCTIONS' block in the user prompt.\nIF IT CONTAINS TEXT:\n    - These instructions DEFINE the *content, style, tone, and focus* for quiz elements. They OVERRIDE general guidelines.\n    - Integrate any requested supplementary information (e.g., IPA, etymology) into the 'explanation' field, alongside the core explanation.\nELSE (if empty or states no custom instructions):\n    - Generate the quiz based on general guidelines and the source content, prioritizing core requirements.\n"}})(e,t,r);try{const c=await a.models.generateContent({model:l,contents:s});if(!c.candidates||0===c.candidates.length)throw h.error("No candidates in Gemini response","GeminiService",{promptLength:n.length,isPromptOnlyMode:i,response:c}),new Error("No candidates in Gemini response");const m=c.candidates[0];if(!m.content||!m.content.parts||0===m.content.parts.length)throw h.error("Invalid candidate structure in Gemini response","GeminiService",{promptLength:n.length,isPromptOnlyMode:i,candidate:m}),new Error("Invalid candidate structure in Gemini response");const g=m.content.parts[0].text;if(!g)throw h.error("Empty text in Gemini response","GeminiService",{promptLength:n.length,isPromptOnlyMode:i,parts:m.content.parts}),new Error("Empty text in Gemini response");const p=(e=>{let t=e.trim();const r=/^```(?:json)?\s*\n?(.*?)\n?\s*```$/s.exec(t);r&&r[1]&&(t=r[1].trim()),t=t.replace(/侬/g,""),t=t.replace(/ܘ/g,""),t=t.replace(/对着/g,""),t=t.replace(/"\s*```\s*([\]\},])/g,'"$1'),t=t.replace(/"\s*```\s*(,"[^"]+")/g,'"$1');try{const e=new RegExp('("[^"\\\\]*(?:\\\\.[^"\\\\]*)*")\\s*\\n\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:\\s+[a-zA-Z_][a-zA-Z0-9_]*)*\\s*)"',"g");t=t.replace(e,(e,t,r)=>`${t.slice(0,-1)} ${r.trim()}"`)}catch(i){h.warn("Error during string newline fixing regex replacement.","GeminiServiceParse",void 0,i)}t=t.replace(/,\s*([\}\]])/g,"$1");try{t=t.replace(/\\(?![bfnrtv"\\/]|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{2})/g,"\\\\")}catch(i){h.warn("Error during bad escape fixing regex replacement.","GeminiServiceParse",void 0,i)}try{return JSON.parse(t)}catch(i){h.error("Primary JSON.parse failed for Gemini response.","GeminiServiceParse",{errorMsg:i.message,cleanedJsonPreview:t.substring(0,200),originalTextPreview:e.substring(0,200)},i);const r=t.indexOf("["),s=t.indexOf("{");let n=-1;if(-1!==r&&(-1===s||r<s)?n=r:-1!==s&&(n=s),-1!==n){let e=0,r=0,i=-1,s=!1;const o=t[n];for(let a=n;a<t.length;a++){const c=t[a];if('"'===c&&(0===a||"\\"!==t[a-1]||"\\"===t[a-1]&&a>1&&"\\"===t[a-2])&&(s=!s),!s){if("{"===c?r++:"}"===c?r--:"["===c?e++:"]"===c&&e--,"{"===o&&0===r&&0===e&&a>=n){i=a;break}if("["===o&&0===e&&0===r&&a>=n){i=a;break}}}if(-1!==i)try{let e=t.substring(n,i+1);return e=e.replace(/,\s*([\}\]])/g,"$1"),JSON.parse(e)}catch(a){h.error("Fallback JSON.parse also failed (Gemini).","GeminiServiceParse",{errorMsg:a.message,substringAttempted:t.substring(n,i+1).substring(0,200)},a)}else h.warn("Fallback parsing: Could not determine a valid JSON substring (Gemini).","GeminiServiceParse")}else h.warn("Fallback parsing: No JSON start characters ([ or {) found in the response (Gemini).","GeminiServiceParse");return null}})(g);if(!p)throw h.error("Failed to parse quiz JSON from Gemini response","GeminiService",{promptLength:n.length,isPromptOnlyMode:i,generatedText:g.substring(0,200)}),new Error("Failed to parse quiz JSON from Gemini response");const f=((e,t)=>{const r=d(t);return e.map((e,t)=>{let i=Array.isArray(e.options)?[...e.options]:[],a=e.correctAnswer;if(i=i.map(e=>"string"==typeof e?e:String(e)),"string"!=typeof a&&(a=String(a)),i.length<4){const e=4-i.length;for(let a=0;a<e;a++)i.push(r("reviewNewOptionDefault",{index:i.length+1+10*t}))}else if(i.length>4){const e=a;let s=i.slice(0,4);if(!s.includes(e)){const i=Array.from(new Set(s.slice(0,3)));for(s=[...i];s.length<3;)s.push(r("reviewNewOptionDefault",{index:s.length+1+10*t+100}));s.push(e),s.length>4&&(s=s.slice(s.length-4)),a=e}i=s}return!i.includes(a)&&i.length>0?(h.warn(`Correct answer for Q${t+1} ('${a}') was not in the final 4 options. Defaulting to first option.`,"GeminiServiceValidation",{options:i,originalCorrect:e.correctAnswer}),a=i[0]):0===i.length&&(a=r("error"),i=[r("error"),r("error"),r("error"),r("error")]),{...e,options:i,correctAnswer:a}})})(p.questions,t.language);return{title:p.title||r||"Generated Quiz",questions:f,language:t.language,difficulty:t.difficulty,sourceContent:n,sourceType:"string"==typeof e?"text":"image",systemPrompt:o,modelResponse:g,modelId:u}}catch(c){throw h.error("Error generating quiz with Gemini","GeminiService",{promptLength:n.length,isPromptOnlyMode:i,error:c},c),c}},X=async e=>{h.info("Attempting to extract text from image with Gemini","GeminiServiceImage",{mimeType:e.mimeType});const t=await Y(),r={parts:[{inlineData:{data:e.base64Data,mimeType:e.mimeType}},{text:"Extract all visible text from this image. Respond with only the extracted text, without any additional commentary, formatting, or markdown. Just return the raw text content found in the image."}]};try{const e=(await t.models.generateContent({model:l,contents:r})).text||"";return h.info("Successfully extracted text from image.","GeminiServiceImage",{textLength:e.trim().length}),e.trim()}catch(i){if(h.error("Error extracting text from image with Gemini","GeminiServiceImage",void 0,i),i instanceof Error){const e=i.message.toLowerCase();if(e.includes("api key not valid")||e.includes("api_key_invalid")||e.includes("api_key is not configured")||e.includes("process.env.api_key not set")||e.includes("process.env.gemini_api_key"))throw new Error("Invalid or Missing Gemini API Key (process.env.API_KEY) for text extraction. Please ensure the environment variable is correctly configured and accessible.");if(e.includes("500")||e.includes("unknown")||e.includes("rpc failed")||e.includes("xhr error"))throw new Error("Failed to extract text from image due to a server or network error. Please try again.")}return null}},Z=Object.freeze(Object.defineProperty({__proto__:null,extractTextFromImageWithGemini:X,generateQuizWithGemini:W,isFormattedQuiz:e=>{if(!e||"string"!=typeof e)return!1;const t=[/(?:Question|Câu)\s*\d+\s*[:)]/i,/^\s*\d+\s*[.)]\s*\S+/m,/\b(?:Question|Câu)\s*\d+\s*[:)]/i].some(t=>t.test(e)),r=[/[A-D]\s*\.\s*\S+/i,/[A-D]\s*\)\s*\S+/i,/[A]\s*[.)].*?[B]\s*[.)]/is,/[B]\s*[.)].*?[C]\s*[.)]/is,/[C]\s*[.)].*?[D]\s*[.)]/is].filter(t=>t.test(e)).length;return t&&r>=2}},Symbol.toStringTag,{value:"Module"})),ee="quizai_quiz_progress",te=new class{constructor(){this.tableExists=null}async checkTableExists(){var t;if(null!==this.tableExists)return this.tableExists;try{const{error:r}=await e.from("quiz_attempts").select("id").limit(1);return r?(null==(t=r.message)?void 0:t.includes("does not exist"))?(this.tableExists=!1,h.warn("quiz_attempts table does not exist, using local storage fallback","QuizProgressService"),!1):(h.warn("Error checking table existence, assuming it exists","QuizProgressService",{},r),this.tableExists=!0,!0):(this.tableExists=!0,!0)}catch(r){return h.error("Exception checking table existence","QuizProgressService",{},r),this.tableExists=!1,!1}}getLocalProgress(){try{const e=localStorage.getItem(ee);return e?JSON.parse(e):{}}catch(e){return h.error("Error parsing local quiz progress","QuizProgressService",{},e),{}}}saveLocalProgress(e){try{localStorage.setItem(ee,JSON.stringify(e))}catch(t){h.error("Error saving quiz progress to localStorage","QuizProgressService",{},t)}}getProgressKey(e,t,r){return`${e}:${t}:${r}`}async saveQuizProgress(t){try{if(!t.userId)return h.warn("Cannot save progress: no user ID provided","QuizProgressService"),null;if(t.id||(t.id=crypto.randomUUID()),await this.checkTableExists())try{const{error:r}=await e.from("quiz_attempts").upsert({id:t.id,user_id:t.userId,quiz_id:t.quizId,current_question_index:t.currentQuestionIndex,answers:t.answers,status:t.completed?"completed":"in_progress",mode:t.mode,time_started:t.timeStarted||(new Date).toISOString(),time_last_activity:(new Date).toISOString(),time_completed:t.completed?(new Date).toISOString():null,score:t.score});if(!r)return t.id;h.warn("Failed to save quiz progress to database, falling back to localStorage","QuizProgressService",{},r)}catch(r){h.warn("Exception saving to database, falling back to localStorage","QuizProgressService",{},r)}const i=this.getLocalProgress();return i[this.getProgressKey(t.userId,t.quizId,t.mode)]={...t,lastUpdated:(new Date).toISOString()},this.saveLocalProgress(i),h.info("Quiz progress saved to localStorage","QuizProgressService",{userId:t.userId,quizId:t.quizId}),t.id}catch(i){return h.error("Exception saving quiz progress","QuizProgressService",{progress:t},i),null}}async getQuizProgress(t,r,i){try{if(await this.checkTableExists())try{const{data:a,error:s}=await e.from("quiz_attempts").select("*").eq("user_id",t).eq("quiz_id",r).eq("mode",i).eq("status","in_progress").single();if(!s&&a){const e=a;return{id:e.id,quizId:e.quiz_id,userId:e.user_id,currentQuestionIndex:e.current_question_index,answers:e.answers||{},completed:"completed"===e.status,mode:e.mode,elapsedTime:0,timeStarted:e.time_started,lastUpdated:e.time_last_activity||e.updated_at,score:e.score}}s&&"PGRST116"!==s.code&&h.warn("Failed to fetch quiz progress from database, checking localStorage","QuizProgressService",{},s)}catch(a){h.warn("Exception fetching from database, checking localStorage","QuizProgressService",{},a)}const s=this.getLocalProgress()[this.getProgressKey(t,r,i)];return s&&h.info("Found quiz progress in localStorage","QuizProgressService",{userId:t,quizId:r,mode:i}),s||null}catch(s){return h.error("Exception fetching quiz progress","QuizProgressService",{userId:t,quizId:r,mode:i},s),null}}async deleteQuizProgress(t,r,i){try{let s=!1;if(await this.checkTableExists())try{const{error:a}=await e.from("quiz_attempts").update({status:"abandoned"}).eq("user_id",t).eq("quiz_id",r).eq("mode",i).eq("status","in_progress");a?h.warn("Failed to mark quiz progress as abandoned in database, will still remove from localStorage","QuizProgressService",{},a):s=!0}catch(a){h.warn("Exception updating status in database, will still remove from localStorage","QuizProgressService",{},a)}const n=this.getLocalProgress();return delete n[this.getProgressKey(t,r,i)],this.saveLocalProgress(n),!0}catch(s){return h.error("Exception deleting quiz progress","QuizProgressService",{userId:t,quizId:r,mode:i},s),!1}}async listQuizProgress(t){try{let i=[];if(await this.checkTableExists())try{const{data:r,error:a}=await e.from("quiz_attempts").select("*").eq("user_id",t).eq("status","in_progress").order("time_last_activity",{ascending:!1});!a&&r&&r.length>0?i=r.map(e=>({id:e.id,quizId:e.quiz_id,userId:e.user_id,currentQuestionIndex:e.current_question_index,answers:e.answers||{},completed:"completed"===e.status,mode:e.mode,elapsedTime:0,timeStarted:e.time_started,lastUpdated:e.time_last_activity||e.updated_at,score:e.score})):a&&"PGRST116"!==a.code&&h.warn("Failed to list quiz progress from database, falling back to localStorage","QuizProgressService",{},a)}catch(r){h.warn("Exception listing from database, falling back to localStorage","QuizProgressService",{},r)}if(i.length>0)return i;const a=this.getLocalProgress(),s=Object.values(a).filter(e=>e.userId===t).sort((e,t)=>{const r=e.lastUpdated?new Date(e.lastUpdated).getTime():0;return(t.lastUpdated?new Date(t.lastUpdated).getTime():0)-r});return s.length>0&&h.info("Found quiz progress in localStorage","QuizProgressService",{userId:t,count:s.length}),s}catch(i){return h.error("Exception listing quiz progress","QuizProgressService",{userId:t},i),[]}}},re=new class{async saveQuizResult(t){try{const{data:{session:r}}=await e.auth.getSession();if(!(null==r?void 0:r.user))return h.warn("User not authenticated, cannot save quiz result","QuizResultsService",{quizId:t.quizId}),null;const i={user_id:r.user.id,quiz_id:t.quizId,score:Number(t.score),status:"completed",current_question_index:t.totalQuestions-1,answers:t.answers||[],time_started:new Date(Date.now()-1e3*(t.timeTaken||0)).toISOString(),time_last_activity:(new Date).toISOString(),time_completed:(new Date).toISOString(),mode:t.sourceMode||"take",created_at:(new Date).toISOString()},{data:a,error:s}=await e.from("quiz_attempts").insert([i]).select("id").single();return s?(h.error("Failed to save quiz result","QuizResultsService",{error:s.message,code:s.code,details:s.details,hint:s.hint}),null):a.id}catch(r){return h.error("Error saving quiz result","QuizResultsService",{quizId:t.quizId,error:r.message},r),null}}async getQuizHistory(t){try{let r=e.from("user_quiz_attempts").select("*").eq("quiz_id",t.quizId).eq("status","completed").order("created_at",{ascending:!1});t.userId&&(r=r.eq("user_id",t.userId)),t.limit&&(r=r.limit(t.limit)),t.offset&&(r=r.range(t.offset,t.offset+(t.limit||10)-1));const{data:i,error:a}=await r;return a?(h.error("Failed to fetch quiz history","QuizResultsService",{error:a.message,code:a.code,details:a.details,hint:a.hint}),[]):(i||[]).map(e=>({id:e.attempt_id,user_id:e.user_id,quiz_id:e.quiz_id,score:e.score,total_questions:e.total_questions,answers:e.answers||[],time_taken:e.time_taken,created_at:e.created_at,user_name:e.user_name||"Anonymous",user_email:e.user_email||null,user_image_url:null,quiz_title:e.quiz_title||null}))}catch(r){return h.error("Error fetching quiz history","QuizResultsService",{quizId:t.quizId,error:r.message},r),[]}}async getUserQuizHistory(t,r=20){try{const{data:i,error:a}=await e.from("user_quiz_attempts").select("*").eq("user_id",t).eq("status","completed").order("created_at",{ascending:!1}).limit(r);return a?(h.error("Failed to fetch user quiz history","QuizResultsService",{error:a.message,code:a.code}),[]):i.map(e=>({id:e.attempt_id,user_id:e.user_id,quiz_id:e.quiz_id,score:e.score,total_questions:e.total_questions,answers:e.answers,time_taken:e.time_taken,created_at:e.created_at,quiz_title:e.quiz_title||"Unknown Quiz",user_name:e.user_name,user_email:e.user_email,user_image_url:null}))}catch(i){return h.error("Error fetching user quiz history","QuizResultsService",{},i),[]}}async getQuizStats(t){try{const{data:r,error:i}=await e.from("quiz_analytics").select("*").eq("quiz_id",t).single();if(i){const{data:r,error:i}=await e.from("quiz_attempts").select("*").eq("quiz_id",t).eq("status","completed");if(i)return h.error("Failed to fetch quiz stats","QuizResultsService",{error:i.message,code:i.code}),{totalAttempts:0,averageScore:0,bestScore:0,averageTime:0,uniqueUsers:0};const a=r||[],s=a.map(e=>{if(e.time_completed&&e.time_started){const t=new Date(e.time_completed),r=new Date(e.time_started);return Math.round((t.getTime()-r.getTime())/1e3)}return null}).filter(e=>"number"==typeof e&&!isNaN(e)),n=new Set(a.map(e=>e.user_id));return{totalAttempts:a.length,averageScore:a.length?a.reduce((e,t)=>e+Number(t.score||0),0)/a.length:0,bestScore:a.length?Math.max(...a.map(e=>Number(e.score||0))):0,averageTime:s.length?s.reduce((e,t)=>e+t,0)/s.length:0,uniqueUsers:n.size}}return{totalAttempts:r.completed_attempts||0,averageScore:r.average_score||0,bestScore:r.highest_score||0,averageTime:r.avg_completion_time||0,uniqueUsers:r.unique_users||0}}catch(r){return h.error("Error fetching quiz stats","QuizResultsService",{quizId:t,error:r.message},r),{totalAttempts:0,averageScore:0,bestScore:0,averageTime:0,uniqueUsers:0}}}async getQuizResult(t){try{const{data:r,error:i}=await e.from("user_quiz_attempts").select("*").eq("attempt_id",t).single();return i?(h.error("Failed to fetch quiz result","QuizResultsService",{error:i.message,code:i.code}),null):{id:r.attempt_id,user_id:r.user_id,quiz_id:r.quiz_id,score:r.score,total_questions:r.total_questions,answers:r.answers,time_taken:r.time_taken,created_at:r.created_at,user_name:r.user_name||"Anonymous User",user_email:r.user_email||null,user_image_url:null,quiz_title:r.quiz_title||"Unknown Quiz"}}catch(r){return h.error("Error fetching quiz result","QuizResultsService",{resultId:t,error:r.message},r),null}}},ie=e=>{if(!e)return"NB";switch(e){case"Easy":case"AI-Determined":default:return"NB";case"Medium":return"TH";case"Hard":return"VD"}},ae=e=>String.fromCharCode(65+e),se=(e,t,r,i,a=!1)=>{const s=e.questionText;let n=i;const o=s.match(/\(?\[?([A-Z]{2,3})[\]\)]?\.?\s/i);o&&o[1]&&(n=o[1].toUpperCase());let c=`${r("azotaFormatQuestionPrefix")} ${t}.(${n}) ${s}\n`;return e.options.forEach((t,r)=>{const i=t===e.correctAnswer;c+=`${a&&i?"*":""}${ae(r)}. ${t}\t`,c=(r+1)%2==0&&r<e.options.length-1&&e.options.length>2?c.trimEnd()+"\n":c.trimEnd()+"  "}),c=c.trim()+"\n",c},ne=(e,t,r,i,a=!1)=>{var s,n;const o=r("azotaFormatExplanationSolutionMarker"),c=r("azotaFormatExplanationMethodMarker"),l=e.explanation.split(o),u=(null==(s=l[0])?void 0:s.replace(c,"").trim())||"",d=(null==(n=l[1])?void 0:n.trim())||(u?"":e.explanation.trim());let h=`${r("azotaFormatQuestionPrefix")} ${t} (${i}):\n`;if(u&&(h+=`${r("azotaFormatExplanationMethod")} ${u}\n`),h+=`${r("azotaFormatExplanationSolution")} ${d||r("resultsNoExplanation")}\n`,a){const t=e.options.findIndex(t=>t===e.correctAnswer);-1!==t&&(h+=`${r("azotaFormatChooseAnswer")} ${ae(t)}\n`)}return h},oe=(e,t)=>{var r;let i="";const a=ie(null==(r=e.config)?void 0:r.difficulty);let s=1;e.questions.length>0&&(i+=`${t("azotaFormatMCQSection")}\n`,e.questions.forEach(e=>{i+=se(e,s++,t,a),i+="\n"})),i+=`${t("azotaFormatEndOfQuiz")}\n`,i+=`${t("azotaFormatAnswerTableTitle")}\n`;let n=1;e.questions.forEach(e=>{const t=e.options.findIndex(t=>t===e.correctAnswer);-1!==t&&(i+=`${n++}${ae(t)} `)}),i=i.trim()+"\n\n",i+=`${t("azotaFormatExplanationSectionTitle")}\n`;let o=1;return e.questions.forEach(r=>{var a;i+=ne(r,o++,t,ie(null==(a=e.config)?void 0:a.difficulty)),i+="\n"}),i},ce=(e,t)=>{var r;let i="";const a=ie(null==(r=e.config)?void 0:r.difficulty);let s=1;return e.questions.length>0&&(i+=`${t("azotaFormatMCQSection")}\n`,e.questions.forEach(e=>{i+=se(e,s,t,a),i+=`${t("azotaFormatExplanationTitle")}\n`,i+=ne(e,s,t,a,!0),i+="\n",s++})),i},le=(e,t)=>{var r;let i="";const a=ie(null==(r=e.config)?void 0:r.difficulty);let s=1;return e.questions.length>0&&(i+=`${t("azotaFormatMCQSection")}\n`,e.questions.forEach(e=>{i+=se(e,s++,t,a,!0),i+="\n"})),i};export{U as a,k as b,re as c,te as d,Q as e,B as f,j as g,K as h,X as i,W as j,le as k,h as l,_ as m,ce as n,oe as o,D as p,V as q,S as r,R as s,N as t,Z as u};
