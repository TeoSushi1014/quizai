import{l as t,U as c}from"./index-Cx5Uiowb.js";class l{constructor(){this.apiKeysCache=new Map,this.cacheExpiry=new Map,this.CACHE_DURATION=5*60*1e3}static getInstance(){return l.instance||(l.instance=new l),l.instance}isCacheValid(e){const a=this.cacheExpiry.get(e);return a?Date.now()<a:!1}async getApiKey(e){var a,s;try{if(this.isCacheValid(e)){const i=this.apiKeysCache.get(e);if(i)return t.info(`Using cached API key for ${e}`,"SecureConfigService"),i}let r=null,n=null,o="";try{o=((a=(await c.auth.getUser()).data.user)==null?void 0:a.email)||""}catch{t.info("No authenticated Supabase user, will only try default API keys","SecureConfigService"),o=""}if(o)try{const i=await c.from("api_keys").select("key_value").eq("key_name",e).eq("owner_email",o).single();r=i.data,n=i.error}catch{t.info(`No personal API key found for ${e}, trying default`,"SecureConfigService")}else t.info(`No user email available, skipping personal API key lookup for ${e}`,"SecureConfigService");if(!r||n){t.info(`Falling back to default system API key for ${e}`,"SecureConfigService");try{const i=await c.from("api_keys").select("key_value").eq("key_name",e).eq("owner_email","default@system").single();r=i.data,n=i.error}catch(i){t.warn(`Failed to fetch default API key for ${e}`,"SecureConfigService",{error:i}),n=i}}if(n)return t.error(`Failed to fetch API key: ${e}`,"SecureConfigService",{error:n}),null;if(r!=null&&r.key_value)return this.apiKeysCache.set(e,r.key_value),this.cacheExpiry.set(e,Date.now()+this.CACHE_DURATION),t.info(`Successfully fetched API key for ${e}`,"SecureConfigService"),r.key_value;t.info(`No database API key found for ${e}, trying environment variables`,"SecureConfigService");let u=null;try{if(e==="GEMINI_API_KEY"?u=(s=window.__ENV__)==null?void 0:s.VITE_GEMINI_API_KEY:(e==="VITE_RECAPTCHA_SITE_KEY"||e==="VITE_RECAPTCHA_ASSESSMENT_API_KEY")&&(u=void 0),u)return this.apiKeysCache.set(e,u),this.cacheExpiry.set(e,Date.now()+this.CACHE_DURATION),t.info(`Successfully fetched ${e} from environment variables`,"SecureConfigService"),u}catch(i){t.warn(`Failed to access environment variable for ${e}`,"SecureConfigService",{error:i})}return t.warn(`No API key found for ${e} in database or environment variables`,"SecureConfigService"),null}catch(r){return t.error(`Error fetching API key: ${e}`,"SecureConfigService",{},r),null}}async getUserPersonalApiKey(e){var a,s;try{let r="";try{r=((a=(await c.auth.getUser()).data.user)==null?void 0:a.email)||""}catch{return t.info("No authenticated Supabase user for personal API key lookup","SecureConfigService"),null}if(!r)return t.info("No user email available for personal API key lookup","SecureConfigService"),null;const n=await c.from("api_keys").select("key_value").eq("key_name",e).eq("owner_email",r).single();return n.error?null:((s=n.data)==null?void 0:s.key_value)||null}catch(r){return t.error(`Error fetching personal API key: ${e}`,"SecureConfigService",{},r),null}}async setApiKey(e,a){var s;try{let r="";try{r=((s=(await c.auth.getUser()).data.user)==null?void 0:s.email)||""}catch{return t.error("No authenticated Supabase user for API key setting","SecureConfigService"),!1}if(!r)return t.error("No user email available for API key setting","SecureConfigService"),!1;const{error:n}=await c.from("api_keys").upsert({key_name:e,key_value:a,owner_email:r});return n?(t.error(`Failed to save API key: ${e}`,"SecureConfigService",{error:n}),!1):(this.apiKeysCache.set(e,a),this.cacheExpiry.set(e,Date.now()+this.CACHE_DURATION),t.info(`Successfully saved API key for ${e}`,"SecureConfigService"),!0)}catch(r){return t.error(`Error saving API key: ${e}`,"SecureConfigService",{},r),!1}}clearCache(){this.apiKeysCache.clear(),this.cacheExpiry.clear(),t.info("API keys cache cleared","SecureConfigService")}async hasApiKey(e){return await this.getApiKey(e)!==null}}const h=l.getInstance();export{h as s};
