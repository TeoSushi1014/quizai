import{a3 as f,l as t,a4 as c}from"./index-CGU9nfBa.js";const q="https://jbuqonmeorldgiwvdror.supabase.co",_="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpidXFvbm1lb3JsZGdpd3Zkcm9yIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODMxNjYwNCwiZXhwIjoyMDYzODkyNjA0fQ.2bRFEKZaE5Fq8OJGrfNWClgmcfCWDJ3l3aPvkCKNP6Q",z=f(q,_,{auth:{autoRefreshToken:!1,persistSession:!1}});class h{async saveQuizResult(e){try{t.info("Saving quiz result to database","QuizResultsService",{quizId:e.quizId,score:e.score,totalQuestions:e.totalQuestions,userId:e.userId});const{data:{user:i}}=await c.auth.getUser();!i&&e.userId&&t.warn("No authenticated user but userId provided, attempting to save anyway","QuizResultsService",{providedUserId:e.userId});const r=(i==null?void 0:i.id)||e.userId||null,{data:o,error:u}=await c.from("quiz_results").insert([{user_id:r,quiz_id:e.quizId,score:e.score,total_questions:e.totalQuestions,answers:e.answers||[],time_taken:e.timeTaken||null,created_at:new Date().toISOString()}]).select().single();return u?(t.error("Failed to save quiz result","QuizResultsService",{error:u.message,code:u.code,effectiveUserId:r,hasAuth:!!i}),null):(t.info("Quiz result saved successfully","QuizResultsService",{resultId:o.id,quizId:e.quizId,effectiveUserId:r}),o.id)}catch(i){return t.error("Error saving quiz result","QuizResultsService",{},i),null}}async getQuizHistory(e){try{t.info("Fetching quiz history","QuizResultsService",{quizId:e.quizId,userId:e.userId,limit:e.limit});const{data:{user:i}}=await c.auth.getUser();i||t.warn("No authenticated user for quiz history fetch - RLS may restrict results","QuizResultsService");let r=c.from("quiz_results").select(`
          id,
          user_id,
          quiz_id,
          score,
          total_questions,
          answers,
          time_taken,
          created_at
        `).eq("quiz_id",e.quizId).order("created_at",{ascending:!1});e.userId?(t.info("Filtering quiz history by userId","QuizResultsService",{userId:e.userId}),r=r.eq("user_id",e.userId)):t.info("Getting all quiz history (no user filter)","QuizResultsService"),e.limit&&(r=r.limit(e.limit)),e.offset&&(r=r.range(e.offset,e.offset+(e.limit||10)-1));const{data:o,error:u}=await r;if(u)return t.error("Failed to fetch quiz history","QuizResultsService",{error:u.message,code:u.code}),[];const s=await Promise.all(o.map(async a=>{let n="Anonymous User",l=null;if(a.user_id)try{const{data:d}=await c.from("users").select("name, email").eq("id",a.user_id).single();d?(n=d.name||"User",l=d.email):t.info("User not found in public.users, might be auth-only user","QuizResultsService",{userId:a.user_id})}catch{t.warn("Could not fetch user info","QuizResultsService",{userId:a.user_id})}return{id:a.id,user_id:a.user_id,quiz_id:a.quiz_id,score:a.score,total_questions:a.total_questions,answers:a.answers,time_taken:a.time_taken,created_at:a.created_at,user_name:n,user_email:l}}));return t.info("Quiz history fetched successfully","QuizResultsService",{quizId:e.quizId,resultCount:s.length}),s}catch(i){return t.error("Error fetching quiz history","QuizResultsService",{},i),[]}}async getQuizHistoryAsOwner(e){try{if(!z)return t.warn("Service role client not available, falling back to regular client","QuizResultsService"),this.getQuizHistory(e);t.info("Fetching quiz history with service role (bypassing RLS)","QuizResultsService",{quizId:e.quizId,limit:e.limit});let i=z.from("quiz_results").select(`
          id,
          user_id,
          quiz_id,
          score,
          total_questions,
          answers,
          time_taken,
          created_at
        `).eq("quiz_id",e.quizId).order("created_at",{ascending:!1});e.limit&&(i=i.limit(e.limit)),e.offset&&(i=i.range(e.offset,e.offset+(e.limit||10)-1));const{data:r,error:o}=await i;if(o)return t.error("Failed to fetch quiz history with service role","QuizResultsService",{error:o.message,code:o.code}),this.getQuizHistory(e);const u=await Promise.all(r.map(async s=>{let a="Anonymous User",n=null;if(s.user_id&&z)try{const{data:l}=await z.from("users").select("name, email").eq("id",s.user_id).single();l&&(a=l.name||"User",n=l.email)}catch{t.warn("Could not fetch user info with service role","QuizResultsService",{userId:s.user_id})}return{id:s.id,user_id:s.user_id,quiz_id:s.quiz_id,score:s.score,total_questions:s.total_questions,answers:s.answers,time_taken:s.time_taken,created_at:s.created_at,user_name:a,user_email:n}}));return t.info("Quiz history fetched successfully with service role","QuizResultsService",{quizId:e.quizId,resultCount:u.length}),u}catch(i){return t.error("Error fetching quiz history with service role","QuizResultsService",{},i),this.getQuizHistory(e)}}async getUserQuizHistory(e,i=20){try{t.info("Fetching user quiz history","QuizResultsService",{userId:e,limit:i});const{data:r,error:o}=await c.from("quiz_results").select(`
          id,
          user_id,
          quiz_id,
          score,
          total_questions,
          answers,
          time_taken,
          created_at
        `).eq("user_id",e).order("created_at",{ascending:!1}).limit(i);if(o)return t.error("Failed to fetch user quiz history","QuizResultsService",{error:o.message,code:o.code}),[];const u=await Promise.all(r.map(async s=>{let a="Unknown Quiz";if(s.quiz_id)try{const{data:n}=await c.from("quizzes").select("title").eq("id",s.quiz_id).single();n&&(a=n.title||"Untitled Quiz")}catch{t.warn("Could not fetch quiz title for user history","QuizResultsService",{quizId:s.quiz_id})}return{id:s.id,user_id:s.user_id,quiz_id:s.quiz_id,score:s.score,total_questions:s.total_questions,answers:s.answers,time_taken:s.time_taken,created_at:s.created_at,quiz_title:a}}));return t.info("User quiz history fetched successfully","QuizResultsService",{userId:e,resultCount:u.length}),u}catch(r){return t.error("Error fetching user quiz history","QuizResultsService",{},r),[]}}async getQuizStats(e){try{t.info("Fetching quiz statistics","QuizResultsService",{quizId:e});const{data:i,error:r}=await c.from("quiz_results").select("score, time_taken, user_id").eq("quiz_id",e);if(r)return t.error("Failed to fetch quiz statistics","QuizResultsService",{error:r.message,code:r.code}),{totalAttempts:0,averageScore:0,bestScore:0,averageTime:0,uniqueUsers:0};const o=i||[],u=o.map(l=>l.score),s=o.filter(l=>l.time_taken!==null).map(l=>l.time_taken),a=new Set(o.filter(l=>l.user_id).map(l=>l.user_id)),n={totalAttempts:o.length,averageScore:u.length>0?Math.round(u.reduce((l,d)=>l+d,0)/u.length):0,bestScore:u.length>0?Math.max(...u):0,averageTime:s.length>0?Math.round(s.reduce((l,d)=>l+d,0)/s.length):0,uniqueUsers:a.size};return t.info("Quiz statistics calculated","QuizResultsService",{quizId:e,...n}),n}catch(i){return t.error("Error calculating quiz statistics","QuizResultsService",{},i),{totalAttempts:0,averageScore:0,bestScore:0,averageTime:0,uniqueUsers:0}}}async getQuizResult(e){try{t.info("Fetching quiz result details","QuizResultsService",{resultId:e});const{data:i,error:r}=await c.from("quiz_results").select(`
          id,
          user_id,
          quiz_id,
          score,
          total_questions,
          answers,
          time_taken,
          created_at
        `).eq("id",e).single();if(r)return t.error("Failed to fetch quiz result details","QuizResultsService",{error:r.message,code:r.code}),null;let o="Anonymous User",u=null,s="Unknown Quiz";if(i.user_id)try{const{data:n}=await c.from("users").select("name, email").eq("id",i.user_id).single();n&&(o=n.name||"User",u=n.email)}catch{t.warn("Could not fetch user info for result","QuizResultsService",{userId:i.user_id})}if(i.quiz_id)try{const{data:n}=await c.from("quizzes").select("title").eq("id",i.quiz_id).single();n&&(s=n.title||"Untitled Quiz")}catch{t.warn("Could not fetch quiz info for result","QuizResultsService",{quizId:i.quiz_id})}const a={id:i.id,user_id:i.user_id,quiz_id:i.quiz_id,score:i.score,total_questions:i.total_questions,answers:i.answers,time_taken:i.time_taken,created_at:i.created_at,user_name:o,user_email:u,quiz_title:s};return t.info("Quiz result details fetched successfully","QuizResultsService",{resultId:e}),a}catch(i){return t.error("Error fetching quiz result details","QuizResultsService",{},i),null}}}const v=new h;export{v as q};
