import{a3 as q,l as s,a4 as c}from"./index-C_TnWY7g.js";const _="https://jbuqonmeorldgiwvdror.supabase.co",f="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpidXFvbm1lb3JsZGdpd3Zkcm9yIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODMxNjYwNCwiZXhwIjoyMDYzODkyNjA0fQ.2bRFEKZaE5Fq8OJGrfNWClgmcfCWDJ3l3aPvkCKNP6Q",d=q(_,f,{auth:{autoRefreshToken:!1,persistSession:!1}});class h{async saveQuizResult(e){try{s.info("Saving quiz result to database","QuizResultsService",{quizId:e.quizId,score:e.score,totalQuestions:e.totalQuestions,userId:e.userId});const{data:i,error:a}=await c.from("quiz_results").insert([{user_id:e.userId||null,quiz_id:e.quizId,score:e.score,total_questions:e.totalQuestions,answers:e.answers||[],time_taken:e.timeTaken||null,created_at:new Date().toISOString()}]).select().single();return a?(s.error("Failed to save quiz result","QuizResultsService",{error:a.message,code:a.code}),null):(s.info("Quiz result saved successfully","QuizResultsService",{resultId:i.id,quizId:e.quizId}),i.id)}catch(i){return s.error("Error saving quiz result","QuizResultsService",{},i),null}}async getQuizHistory(e){try{s.info("Fetching quiz history","QuizResultsService",{quizId:e.quizId,userId:e.userId,limit:e.limit});let i=c.from("quiz_results").select(`
          id,
          user_id,
          quiz_id,
          score,
          total_questions,
          answers,
          time_taken,
          created_at
        `).eq("quiz_id",e.quizId).order("created_at",{ascending:!1});e.userId?(s.info("Filtering quiz history by userId","QuizResultsService",{userId:e.userId}),i=i.eq("user_id",e.userId)):s.info("Getting all quiz history (no user filter)","QuizResultsService"),e.limit&&(i=i.limit(e.limit)),e.offset&&(i=i.range(e.offset,e.offset+(e.limit||10)-1));const{data:a,error:l}=await i;if(l)return s.error("Failed to fetch quiz history","QuizResultsService",{error:l.message,code:l.code}),[];const n=await Promise.all(a.map(async t=>{let o="Anonymous User",u=null;if(t.user_id)try{const{data:r}=await c.from("users").select("name, email").eq("id",t.user_id).single();r&&(o=r.name||"User",u=r.email)}catch{s.warn("Could not fetch user info","QuizResultsService",{userId:t.user_id})}return{id:t.id,user_id:t.user_id,quiz_id:t.quiz_id,score:t.score,total_questions:t.total_questions,answers:t.answers,time_taken:t.time_taken,created_at:t.created_at,user_name:o,user_email:u}}));return s.info("Quiz history fetched successfully","QuizResultsService",{quizId:e.quizId,resultCount:n.length}),n}catch(i){return s.error("Error fetching quiz history","QuizResultsService",{},i),[]}}async getQuizHistoryAsOwner(e){try{if(!d)return s.warn("Service role client not available, falling back to regular client","QuizResultsService"),this.getQuizHistory(e);s.info("Fetching quiz history with service role (bypassing RLS)","QuizResultsService",{quizId:e.quizId,limit:e.limit});let i=d.from("quiz_results").select(`
          id,
          user_id,
          quiz_id,
          score,
          total_questions,
          answers,
          time_taken,
          created_at
        `).eq("quiz_id",e.quizId).order("created_at",{ascending:!1});e.limit&&(i=i.limit(e.limit)),e.offset&&(i=i.range(e.offset,e.offset+(e.limit||10)-1));const{data:a,error:l}=await i;if(l)return s.error("Failed to fetch quiz history with service role","QuizResultsService",{error:l.message,code:l.code}),this.getQuizHistory(e);const n=await Promise.all(a.map(async t=>{let o="Anonymous User",u=null;if(t.user_id&&d)try{const{data:r}=await d.from("users").select("name, email").eq("id",t.user_id).single();r&&(o=r.name||"User",u=r.email)}catch{s.warn("Could not fetch user info with service role","QuizResultsService",{userId:t.user_id})}return{id:t.id,user_id:t.user_id,quiz_id:t.quiz_id,score:t.score,total_questions:t.total_questions,answers:t.answers,time_taken:t.time_taken,created_at:t.created_at,user_name:o,user_email:u}}));return s.info("Quiz history fetched successfully with service role","QuizResultsService",{quizId:e.quizId,resultCount:n.length}),n}catch(i){return s.error("Error fetching quiz history with service role","QuizResultsService",{},i),this.getQuizHistory(e)}}async getUserQuizHistory(e,i=20){try{s.info("Fetching user quiz history","QuizResultsService",{userId:e,limit:i});const{data:a,error:l}=await c.from("quiz_results").select(`
          id,
          user_id,
          quiz_id,
          score,
          total_questions,
          answers,
          time_taken,
          created_at
        `).eq("user_id",e).order("created_at",{ascending:!1}).limit(i);if(l)return s.error("Failed to fetch user quiz history","QuizResultsService",{error:l.message,code:l.code}),[];const n=await Promise.all(a.map(async t=>{let o="Unknown Quiz";if(t.quiz_id)try{const{data:u}=await c.from("quizzes").select("title").eq("id",t.quiz_id).single();u&&(o=u.title||"Untitled Quiz")}catch{s.warn("Could not fetch quiz title for user history","QuizResultsService",{quizId:t.quiz_id})}return{id:t.id,user_id:t.user_id,quiz_id:t.quiz_id,score:t.score,total_questions:t.total_questions,answers:t.answers,time_taken:t.time_taken,created_at:t.created_at,quiz_title:o}}));return s.info("User quiz history fetched successfully","QuizResultsService",{userId:e,resultCount:n.length}),n}catch(a){return s.error("Error fetching user quiz history","QuizResultsService",{},a),[]}}async getQuizStats(e){try{s.info("Fetching quiz statistics","QuizResultsService",{quizId:e});const{data:i,error:a}=await c.from("quiz_results").select("score, time_taken, user_id").eq("quiz_id",e);if(a)return s.error("Failed to fetch quiz statistics","QuizResultsService",{error:a.message,code:a.code}),{totalAttempts:0,averageScore:0,bestScore:0,averageTime:0,uniqueUsers:0};const l=i||[],n=l.map(r=>r.score),t=l.filter(r=>r.time_taken!==null).map(r=>r.time_taken),o=new Set(l.filter(r=>r.user_id).map(r=>r.user_id)),u={totalAttempts:l.length,averageScore:n.length>0?Math.round(n.reduce((r,z)=>r+z,0)/n.length):0,bestScore:n.length>0?Math.max(...n):0,averageTime:t.length>0?Math.round(t.reduce((r,z)=>r+z,0)/t.length):0,uniqueUsers:o.size};return s.info("Quiz statistics calculated","QuizResultsService",{quizId:e,...u}),u}catch(i){return s.error("Error calculating quiz statistics","QuizResultsService",{},i),{totalAttempts:0,averageScore:0,bestScore:0,averageTime:0,uniqueUsers:0}}}async getQuizResult(e){try{s.info("Fetching quiz result details","QuizResultsService",{resultId:e});const{data:i,error:a}=await c.from("quiz_results").select(`
          id,
          user_id,
          quiz_id,
          score,
          total_questions,
          answers,
          time_taken,
          created_at
        `).eq("id",e).single();if(a)return s.error("Failed to fetch quiz result details","QuizResultsService",{error:a.message,code:a.code}),null;let l="Anonymous User",n=null,t="Unknown Quiz";if(i.user_id)try{const{data:u}=await c.from("users").select("name, email").eq("id",i.user_id).single();u&&(l=u.name||"User",n=u.email)}catch{s.warn("Could not fetch user info for result","QuizResultsService",{userId:i.user_id})}if(i.quiz_id)try{const{data:u}=await c.from("quizzes").select("title").eq("id",i.quiz_id).single();u&&(t=u.title||"Untitled Quiz")}catch{s.warn("Could not fetch quiz info for result","QuizResultsService",{quizId:i.quiz_id})}const o={id:i.id,user_id:i.user_id,quiz_id:i.quiz_id,score:i.score,total_questions:i.total_questions,answers:i.answers,time_taken:i.time_taken,created_at:i.created_at,user_name:l,user_email:n,quiz_title:t};return s.info("Quiz result details fetched successfully","QuizResultsService",{resultId:e}),o}catch(i){return s.error("Error fetching quiz result details","QuizResultsService",{},i),null}}}const y=new h;export{y as q};
