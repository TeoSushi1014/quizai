import{l as r,U as i}from"./index-Du8ONRop.js";import"./utils-rUpm7H1u.js";import"./vendor-DoC2WAmd.js";import"./ui-BGuvgkTr.js";import"./router-BxjC687J.js";import"./markdown-Bj7tmv2T.js";class l{static async runFullDiagnostics(){const e=performance.now();try{const o={environment:this.checkEnvironment(),supabase:await this.checkSupabase(),googleAuth:this.checkGoogleAuth(),localStorage:this.checkLocalStorage(),network:this.checkNetwork(),permissions:this.checkPermissions()},n=performance.now()-e;return r.info("Deployment diagnostics completed","DeploymentDiagnostics",{duration:`${n.toFixed(2)}ms`,summary:{environment:o.environment.isProduction?"Production":"Development",supabase:o.supabase.configured?"Configured":"Not Configured",connection:o.supabase.connectionTest.success?"Success":"Failed",storage:o.localStorage.available?"Available":"Unavailable",network:o.network.online?"Online":"Offline"}}),o}catch(o){throw r.error("Deployment diagnostics failed","DeploymentDiagnostics",{},o),o}}static checkEnvironment(){const e=window.location.hostname;return{isProduction:e!=="localhost"&&!e.includes("127.0.0.1")&&!e.includes("192.168"),hostname:e,protocol:window.location.protocol,userAgent:navigator.userAgent.substring(0,100)}}static async checkSupabase(){const n={configured:!0,urlStatus:"Configured",keyStatus:`Configured (${"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpidXFvbm1lb3JsZGdpd3Zkcm9yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgzMTY2MDQsImV4cCI6MjA2Mzg5MjYwNH0.vcMUnOgSPAgpigUOkkcopk5XH5AMyNjM772oUqTJGfo".length} chars)`,connectionTest:{success:!1,error:void 0,latency:void 0}};{const t=performance.now();try{const{error:s}=await i.from("users").select("count").limit(1),c=performance.now()-t;s?n.connectionTest={success:!1,error:`${s.code}: ${s.message}`,latency:c}:n.connectionTest={success:!0,error:void 0,latency:c}}catch(s){n.connectionTest={success:!1,error:s.message,latency:performance.now()-t}}}return n}static checkGoogleAuth(){return{configured:!0,domain:window.location.hostname}}static checkLocalStorage(){try{const e="__deployment_test__";localStorage.setItem(e,"test"),localStorage.removeItem(e);let o="Unknown";return"storage"in navigator&&"estimate"in navigator.storage&&navigator.storage.estimate().then(n=>{o=`~${n.quota?Math.round(n.quota/1024/1024):"Unknown"}MB`}).catch(()=>{o="Cannot estimate"}),{available:!0,quota:o}}catch(e){return{available:!1,error:e.message}}}static checkNetwork(){const e=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return{online:navigator.onLine,effectiveType:(e==null?void 0:e.effectiveType)||"Unknown"}}static checkPermissions(){return{notifications:"Available",geolocation:"Available"}}static async quickHealthCheck(){const e=[],o=[];try{try{const{error:t}=await i.from("users").select("count").limit(1);t&&(t.code==="42P01"?(e.push('Database table "users" does not exist'),o.push("Run database migrations or check table creation scripts")):t.code==="42501"?(e.push("RLS policy preventing access to users table"),o.push("Check Row Level Security policies in Supabase dashboard")):(e.push(`Database connection error: ${t.message}`),o.push("Check Supabase URL and API key configuration")))}catch{e.push("Cannot connect to Supabase"),o.push("Check network connectivity and Supabase configuration")}try{const{error:t}=await i.auth.getSession();t&&(e.push(`Authentication error: ${t.message}`),o.push("Check Supabase authentication configuration"))}catch{e.push("Authentication system not working"),o.push("Check Supabase auth setup and CORS configuration")}let n="healthy";return e.length>0&&(n=e.some(s=>s.includes("Missing")||s.includes("does not exist")||s.includes("Cannot connect"))?"error":"warning"),{status:n,issues:e,suggestions:o}}catch{return{status:"error",issues:["Health check failed to complete"],suggestions:["Check browser console for detailed error information"]}}}static async logDiagnostics(){try{console.log("🔍 Running deployment diagnostics...");const e=await this.runFullDiagnostics();console.group("🌍 Environment Information"),console.log("Production:",e.environment.isProduction),console.log("Hostname:",e.environment.hostname),console.log("Protocol:",e.environment.protocol),console.groupEnd(),console.group("🗄️ Supabase Configuration"),console.log("Configured:",e.supabase.configured),console.log("URL Status:",e.supabase.urlStatus),console.log("Key Status:",e.supabase.keyStatus),console.log("Connection Test:",e.supabase.connectionTest),console.groupEnd(),console.group("💾 Storage & Network"),console.log("LocalStorage:",e.localStorage.available?"Available":"Unavailable"),console.log("Network:",e.network.online?"Online":"Offline"),console.log("Connection Type:",e.network.effectiveType),console.groupEnd();const o=await this.quickHealthCheck();console.group(`🏥 Health Check - ${o.status.toUpperCase()}`),o.issues.length>0?(console.log("Issues:",o.issues),console.log("Suggestions:",o.suggestions)):console.log("✅ All systems operational"),console.groupEnd()}catch(e){console.error("❌ Diagnostic logging failed:",e)}}}const f=()=>l.logDiagnostics();window.location.hostname!=="localhost"&&setTimeout(()=>{l.quickHealthCheck().then(a=>{a.status==="error"&&(console.error("⚠️ Critical deployment issues detected:",a.issues),console.log("💡 Suggestions:",a.suggestions))})},2e3);export{l as DeploymentDiagnosticService,f as runDiagnostics};
