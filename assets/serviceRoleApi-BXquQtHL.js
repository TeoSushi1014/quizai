import{l as o}from"./index-D1WZoZJd.js";import"./ui-BGuvgkTr.js";import"./router-BxjC687J.js";import"./vendor-DoC2WAmd.js";import"./utils-rUpm7H1u.js";import"./markdown-Bj7tmv2T.js";const u="https://jbuqonmeorldgiwvdror.supabase.co",l="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpidXFvbm1lb3JsZGdpd3Zkcm9yIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODMxNjYwNCwiZXhwIjoyMDYzODkyNjA0fQ.qul2BaYdkubaXlgRmXBFtQZI3Ok_P_SokuP9nC2mVDU";class h{constructor(){o.info("ServiceRoleApi initialized successfully","ServiceRoleApi",{hasUrl:!0,hasKey:!0,urlLength:(u==null?void 0:u.length)||0,keyLength:(l==null?void 0:l.length)||0}),this.baseUrl=`${u}/rest/v1`,this.headers={apikey:l,Authorization:`Bearer ${l}`,"Content-Type":"application/json",Prefer:"return=representation","x-client-info":"quizai-service-role-api"}}async getQuizzes(e){try{const s=new URLSearchParams({select:"*",user_id:`eq.${e}`,order:"created_at.desc"}),t=`${this.baseUrl}/quizzes?${s.toString()}`;o.info("ServiceRoleApi: Fetching user quizzes","ServiceRoleApi",{userId:e});const r=await fetch(t,{method:"GET",headers:this.headers});if(!r.ok){const a=await r.text();return o.error("ServiceRoleApi: Failed to fetch quizzes","ServiceRoleApi",{status:r.status,error:a,userId:e}),{data:null,error:{message:a,status:r.status}}}const i=await r.json();return o.info("ServiceRoleApi: Successfully fetched quizzes","ServiceRoleApi",{userId:e,count:i.length}),{data:i,error:null}}catch(s){const t=s instanceof Error?s.message:"Unknown error";return o.error("ServiceRoleApi: Network error fetching quizzes","ServiceRoleApi",{error:t,userId:e}),{data:null,error:{message:t}}}}async getQuizById(e,s){try{const t=new URLSearchParams({select:"*",id:`eq.${e}`,user_id:`eq.${s}`,limit:"1"}),r=`${this.baseUrl}/quizzes?${t.toString()}`;o.info("ServiceRoleApi: Fetching quiz by ID","ServiceRoleApi",{quizId:e,userId:s});const i=await fetch(r,{method:"GET",headers:this.headers});if(!i.ok){const c=await i.text();return o.error("ServiceRoleApi: Failed to fetch quiz","ServiceRoleApi",{status:i.status,error:c,quizId:e,userId:s}),{data:null,error:{message:c,status:i.status}}}const a=await i.json(),n=Array.isArray(a)&&a.length>0?a[0]:null;return o.info("ServiceRoleApi: Successfully fetched quiz","ServiceRoleApi",{quizId:e,userId:s,found:!!n}),{data:n,error:null}}catch(t){const r=t instanceof Error?t.message:"Unknown error";return o.error("ServiceRoleApi: Network error fetching quiz","ServiceRoleApi",{error:r,quizId:e,userId:s}),{data:null,error:{message:r}}}}async getSharedQuizByQuizId(e){try{const s=new URLSearchParams({select:"id,quiz_id,share_token,is_public,expires_at,created_at",quiz_id:`eq.${e}`,is_public:"eq.true",limit:"1"}),t=`${this.baseUrl}/shared_quizzes?${s.toString()}`;o.info("ServiceRoleApi: Fetching shared quiz by quiz_id","ServiceRoleApi",{quizId:e});const r=await fetch(t,{method:"GET",headers:this.headers});if(!r.ok){const n=await r.text();return o.error("ServiceRoleApi: Failed to fetch shared quiz","ServiceRoleApi",{status:r.status,error:n,quizId:e}),{data:null,error:{message:n,status:r.status}}}const i=await r.json(),a=Array.isArray(i)&&i.length>0?i[0]:null;return o.info("ServiceRoleApi: Successfully fetched shared quiz","ServiceRoleApi",{quizId:e,found:!!a}),{data:a,error:null}}catch(s){const t=s instanceof Error?s.message:"Unknown error";return o.error("ServiceRoleApi: Network error fetching shared quiz","ServiceRoleApi",{error:t,quizId:e}),{data:null,error:{message:t}}}}async getSharedQuizByToken(e){try{const s=new URLSearchParams({select:"id,quiz_id,share_token,is_public,expires_at,created_at",share_token:`eq.${e}`,is_public:"eq.true",limit:"1"}),t=`${this.baseUrl}/shared_quizzes?${s.toString()}`;o.info("ServiceRoleApi: Fetching shared quiz by token","ServiceRoleApi",{shareToken:e});const r=await fetch(t,{method:"GET",headers:this.headers});if(!r.ok){const n=await r.text();return o.error("ServiceRoleApi: Failed to fetch shared quiz by token","ServiceRoleApi",{status:r.status,error:n,shareToken:e}),{data:null,error:{message:n,status:r.status}}}const i=await r.json(),a=Array.isArray(i)&&i.length>0?i[0]:null;return o.info("ServiceRoleApi: Successfully fetched shared quiz by token","ServiceRoleApi",{shareToken:e,found:!!a}),{data:a,error:null}}catch(s){const t=s instanceof Error?s.message:"Unknown error";return o.error("ServiceRoleApi: Network error fetching shared quiz by token","ServiceRoleApi",{error:t,shareToken:e}),{data:null,error:{message:t}}}}async getUserById(e){try{const s=new URLSearchParams({select:"name,email",id:`eq.${e}`,limit:"1"}),t=`${this.baseUrl}/users?${s.toString()}`;o.info("ServiceRoleApi: Fetching user by ID","ServiceRoleApi",{userId:e});const r=await fetch(t,{method:"GET",headers:this.headers});if(!r.ok){const n=await r.text();return o.error("ServiceRoleApi: Failed to fetch user","ServiceRoleApi",{status:r.status,error:n,userId:e}),{data:null,error:{message:n,status:r.status}}}const i=await r.json(),a=Array.isArray(i)&&i.length>0?i[0]:null;return o.info("ServiceRoleApi: Successfully fetched user","ServiceRoleApi",{userId:e,found:!!a}),{data:a,error:null}}catch(s){const t=s instanceof Error?s.message:"Unknown error";return o.error("ServiceRoleApi: Network error fetching user","ServiceRoleApi",{error:t,userId:e}),{data:null,error:{message:t}}}}async createQuiz(e){try{const s=`${this.baseUrl}/quizzes`;o.info("ServiceRoleApi: Creating quiz","ServiceRoleApi",{quizId:e.id});const t=await fetch(s,{method:"POST",headers:{...this.headers,Prefer:"return=representation"},body:JSON.stringify(e)});if(!t.ok){const a=await t.text();return o.error("ServiceRoleApi: Failed to create quiz","ServiceRoleApi",{status:t.status,error:a,quizId:e.id}),{data:null,error:{message:a,status:t.status}}}const r=await t.json(),i=Array.isArray(r)&&r.length>0?r[0]:r;return o.info("ServiceRoleApi: Successfully created quiz","ServiceRoleApi",{quizId:e.id,created:!!i}),{data:i,error:null}}catch(s){const t=s instanceof Error?s.message:"Unknown error";return o.error("ServiceRoleApi: Network error creating quiz","ServiceRoleApi",{error:t,quizId:e.id}),{data:null,error:{message:t}}}}async checkQuizOwnership(e,s){try{const t=new URLSearchParams({select:"id,user_id",id:`eq.${e}`,user_id:`eq.${s}`,limit:"1"}),r=`${this.baseUrl}/quizzes?${t.toString()}`;o.info("ServiceRoleApi: Checking quiz ownership","ServiceRoleApi",{quizId:e,userId:s});const i=await fetch(r,{method:"GET",headers:this.headers});if(!i.ok){const c=await i.text();return o.error("ServiceRoleApi: Failed to check quiz ownership","ServiceRoleApi",{status:i.status,error:c,quizId:e,userId:s}),{data:null,error:{message:c,status:i.status}}}const a=await i.json(),n=Array.isArray(a)&&a.length>0?a[0]:null;return o.info("ServiceRoleApi: Successfully checked quiz ownership","ServiceRoleApi",{quizId:e,userId:s,owned:!!n}),{data:n,error:null}}catch(t){const r=t instanceof Error?t.message:"Unknown error";return o.error("ServiceRoleApi: Network error checking quiz ownership","ServiceRoleApi",{error:r,quizId:e,userId:s}),{data:null,error:{message:r}}}}async checkExistingShare(e){try{const s=new URLSearchParams({select:"share_token",quiz_id:`eq.${e}`,limit:"1"}),t=`${this.baseUrl}/shared_quizzes?${s.toString()}`;o.info("ServiceRoleApi: Checking existing share","ServiceRoleApi",{quizId:e});const r=await fetch(t,{method:"GET",headers:this.headers});if(!r.ok){const n=await r.text();return o.error("ServiceRoleApi: Failed to check existing share","ServiceRoleApi",{status:r.status,error:n,quizId:e}),{data:null,error:{message:n,status:r.status}}}const i=await r.json(),a=Array.isArray(i)&&i.length>0?i[0]:null;return o.info("ServiceRoleApi: Successfully checked existing share","ServiceRoleApi",{quizId:e,hasExistingShare:!!a}),{data:a,error:null}}catch(s){const t=s instanceof Error?s.message:"Unknown error";return o.error("ServiceRoleApi: Network error checking existing share","ServiceRoleApi",{error:t,quizId:e}),{data:null,error:{message:t}}}}}const m=new h;export{m as serviceRoleApi};
